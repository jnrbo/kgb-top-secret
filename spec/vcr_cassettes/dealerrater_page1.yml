---
http_interactions:
- request:
    method: get
    uri: https://www.dealerrater.com/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/page1/?__optvLead=3&filter=ONLY_POSITIVE
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - KGB/37.26.8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '252088'
      Connection:
      - keep-alive
      Cache-Control:
      - private
      Date:
      - Thu, 14 Jan 2021 00:25:38 GMT
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=512qolwhe5kexqjl1iuafwzb; path=/; HttpOnly; SameSite=Lax
      - __dr_env=production; path=/
      - __dr_env=production; path=/
      - dealerId=23685; expires=Sat, 14-Jan-2023 00:25:39 GMT; path=/
      - dealerId=23685; expires=Sat, 14-Jan-2023 00:25:39 GMT; path=/
      - dealerId=23685; expires=Sat, 14-Jan-2023 00:25:39 GMT; path=/
      - firstPage=https://www.dealerrater.com/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/page1/?filter=ONLY_POSITIVE&__optvLead=3;
        expires=Tue, 31-Dec-2030 05:00:00 GMT; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Aspnetmvc-Version:
      - '5.2'
      X-Powered-By:
      - ARR/3.0
      - ASP.NET
      - ASP.NET
      X-Ua-Compatible:
      - IE=edge
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 1e3156d508e339563b8328e49656f6c5.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - GRU50-C1
      X-Amz-Cf-Id:
      - 63q35zFC-C0yRsIBwx5W0S3hggpYk-dwT6a4Cbt4fwRWZQ21CSC1LA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        

<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js">
 <!--<![endif]-->

<head prefix="og: http://ogp.me/ns#">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title class="notranslate">McKaig Chevrolet Buick - A Dealer For The People - Chevrolet, Buick, Used Car Dealer, Service Center - Dealership Reviews</title>
    <meta name="description" class="notranslate" content="Read 2009 Reviews of McKaig Chevrolet Buick - A Dealer For The People - Chevrolet, Buick, Used Car Dealer, Service Center dealership reviews written by real people like you." />
    <meta name="keywords" class="notranslate" content="McKaig Chevrolet Buick - A Dealer For The People reviews, Chevrolet, Buick, Used Car Dealer, Service Center, Gladewater, TX, 75647, dealer reviews, car dealership reviews" />
    <meta name="viewport" content="initial-scale=1.0001, minimum-scale=1.0001, maximum-scale=1.0001, user-scalable=no, width=device-width">
    <meta property="og:title" content="DealerRater - Car Dealer Reviews, Car Dealer Directory, Vehicles For Sale, Vehicle Recalls" />
    <meta property="og:image" content="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/locales/en-US/logo_dealerrater_fb_200x200.jpg" />
    

    <!-- Global Website Schema -->
    <script type="application/ld+json">
        {
        "@context": "http://schema.org",
        "@type": "WebSite",
        "name": "DealerRater",
        "url": "https://www.dealerrater.com/"
        }
    </script>

    <!-- Adobe Analytics header -->
    <script src=//assets.adobedtm.com/launch-ENca0e03f0c5ed477c922a5b019999f81d.min.js async></script>

    <!-- Start Optimizely -->
    <script type="text/javascript">
        window.optimizely = window.optimizely || [];
        window.optimizely.push({ type: "holdEvents" });
    </script>
    <script src="//cdn.optimizely.com/js/11109425851.js"></script>
    <!-- End Optimizely -->


    <link href="https://www.dealerrater.com/ncdn/bundle/s/183.20210104.1/ResponsiveStylesBundle.bundle.css?v=m6Al2XznqlDR0zjSE8DMFR__fCguwvr6b7Blxu_zqFU1" rel="stylesheet"/>

    <script src="https://www.dealerrater.com/ncdn/bundle/s/183.20210104.1/HeadScriptBundle.bundle.js?v=h3_SfEcl0mU94cCFb4m_sddpIstTBNk8dFcesGUxQ8A1"></script>

    
    


    <script type="text/javascript">
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-87014-1', 'dealerrater.com');
ga('set', 'dimension2', '23685');

ga('send', 'pageview');

if (window.optimizely && typeof window.optimizely.get === 'function' && window.optimizely.get('custom/gaIntegrator')) {
window.optimizely.push({ type: 'sendEvents'});
window.optimizely.get('custom/gaIntegrator').gaDispatch(window.ga);
}

  function recordEvent(category, action, label, value, noninteraction) {
     ga('send', 'event', category, action, label, value, {'nonInteraction' : noninteraction});
  }
</script>

    <!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-T746MC');</script>
<!-- End Google Tag Manager -->
    <script type="text/javascript">
digitalData = {}; 
digitalData.page ={
pageInfo:{
 "pageName" : "Dealer Reviews Page", "siteSection1" : "Dealer Reviews",}}; 

</script>



    <!--[if lt IE 9]>
    <script src="//cdn.jsdelivr.net/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->

    <link rel="icon" href="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/favicon.ico" />
    <link rel="canonical" href="https://www.dealerrater.com/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/page1/" />
            <link rel="next" href="https://www.dealerrater.com/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/page2/" />

    <script type="text/javascript">
        /* <![CDATA[ */
        var google_conversion_id = 1068898459;
        var google_custom_params = window.google_tag_params;
        var google_remarketing_only = true;
        /* ]]> */
    </script>
    <script type="text/javascript" src="//www.googleadservices.com/pagead/conversion.js"></script>
    <script src='https://s.yimg.com/uv/dm/scripts/syndication.js' async></script>
    <style>
        #ypaAdWrapper-dealrater iframe {
            width: 100%;
        }
    </style>

    <noscript>
        <div style="display:inline;">
            <img height="1" width="1" style="border-style:none;" alt="" src="//googleads.g.doubleclick.net/pagead/viewthroughconversion/1068898459/?value=0&amp;guid=ON&amp;script=0" />
        </div>
    </noscript>



</head>

<body>
    <!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-T746MC"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->
    <div id="appUI">
        <!-- LEFT CONTAINER -->
        <div id="leftContainer">

            
    

<div class="text-center margin-top-lg">
    <div class="text-left inline-block">
        <div class="mobile-nav-option active">
            <a onclick="recordEvent('Global-Header', 'dealer-reviews_click', location.href, null, false);" href="https://www.dealerrater.com/reviews" title="Dealer Reviews" class="">Dealer Reviews</a>
            <p>Find the best dealership for you.</p>
        </div>
        <div class="mobile-nav-option ">
            <a onclick="recordEvent('Global-Header', 'service-reviews_click', location.href, null, false);" href="https://www.dealerrater.com/service" title="Service Reviews" class="">Service Reviews</a>
            <p>Find good folks to fix your car.  </p>
        </div>
        <div class="mobile-nav-option ">
            <a onclick="recordEvent('Global-Header', 'cars-for-sale_click', location.href, null, false);" class="" href="https://www.dealerrater.com/classifieds" title="Cars for Sale">Cars for Sale</a>
            <p>Find the right car for you.</p>
        </div>
        <div class="mobile-nav-option ">
            <a onclick="recordEvent('Global-Header', 'car-recalls_click', location.href, null, false);" class="" href="https://www.dealerrater.com/recalls" title="Car Recalls">Car Recalls</a>
            <p>Make sure your car is safe to drive.</p>
        </div>
        <div class="margin-bottom-lg pull-left clear-fix">
            <a onclick="recordEvent('Global-Header', 'write-review_click', location.href, null, false);" class="primary-button teal" href="/consumer/writereviews/search" title="Write a Review">Write a Review</a>
        </div>
    </div>
</div>

<div class="col-xs-12 bg-grey-md pad-top-lg pad-bottom-lg text-center margin-top-sm mobile-nav-bottom">
    <div class="table width-100">
            <div class="valign-middle td width-33 pad-right-md border-right">
                <a class="font-14 uppercase white" href="https://www.dealerrater.com/register/?ReturnUrl=https%3a%2f%2fwww.dealerrater.com%2fconsumer%2fdealer%2f23685%2freviewsnew%3fpage%3d1%26filter%3dONLY_POSITIVE%26__optvLead%3d3" title="Join">Join</a>
            </div>
            <div class="valign-middle td width-33 pad-left-md pad-right-md">
                <a class="font-14 uppercase white" href="https://www.dealerrater.com/login/?ReturnUrl=https%3a%2f%2fwww.dealerrater.com%2fconsumer%2fdealer%2f23685%2freviewsnew%3fpage%3d1%26filter%3dONLY_POSITIVE%26__optvLead%3d3" title="Sign In">Sign In</a>
            </div>
        <div class="valign-middle td width-33 pad-left-md border-left">
            <a class="font-14 uppercase white" href="/dealers" title="Dealer Panel">Dealer Panel</a>
        </div>
    </div>
</div>






        </div>

        <!-- MAIN CONTAINER -->
        <div id="mainContainer" class="bg-grey-lt">
            <!-- PUSH DOWN NOTICE -->
            <div id="locationAlertBar" class="display-none">
                <div id="pushdownNotice" class="hidden-xs bg-lt-blue text-center font-16 box-shadow-bottom">
                    <p id="locationPromptText" class="pad-lg margin-none"></p>
                    <a id="pushdownNoticeClose" class="absolute-right top-5 pointer" role="button"><img alt="Close" height="26" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_close_x.png" width="31" /></a>
                </div>
                <!-- Place holder div to push the remaining contents below the localization prompt -->
                <div id="pushDownNoticePlaceHolder" style="height: 60px;">
                </div>
            </div>
            <!-- HEADER -->
            <header class="fill-width margin-none pad-none ">
                <!-- mobile nav -->
                <div id="mobileNavContainer" class="col-xs-12 margin-none pad-none fill-height">
                    <!-- Progress Tracker -->
                    

                    <!-- mobile nav toggle -->
                    <div id="mobileNavHeader" class="fill-height">
                        <div class="table width-100 fill-height">
                                <div class="td valign-middle mobile-nav-td text-right">
                                    <span id="hamburgerButton" class=" glyphicon hamburgerWrapper header-icon pointer">
                                        <button id="hamburger" class="hamburger hamburger--spring orange-lt" type="button">
                                            <span class="hamburger-box">
                                                <span class="hamburger-inner"></span>
                                            </span>
                                        </button>
                                    </span>
                                    <span id="mobile-back" class="header-icon glyphicon glyphicon-arrow-left orange-lt font-24 pointer"></span>
                                </div>
                            <div class="td valign-middle text-center">
                                <!-- logo -->
                                <a   href="https://www.dealerrater.com/"   ><img class="logo-sm" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/dr-logo-horizontal.png" /></a>
                            </div>
                                <div class="td valign-middle mobile-nav-td text-left" id="searchContainer">
                                    <img class="pointer header-search-icon" id="searchToggle" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-search-orange.png" />
                                </div>

                        </div>
                    </div>
                </div>

                <!-- primary nav -->
                <div id="primaryNavContainer" class="">
                    <div id="userHeader" class="col-xs-12 margin-none ">
                        <div class="header-wrapper relative">

                            <div class="pull-right" id="userHeaderRight">
                                <div id="userHeaderRightContent">
                                    

                                    <div class="pull-right text-right" >
                                            <a title="Sign In" href="https://www.dealerrater.com/login/?ReturnUrl=https%3a%2f%2fwww.dealerrater.com%2fconsumer%2fdealer%2f23685%2freviewsnew%3fpage%3d1%26filter%3dONLY_POSITIVE%26__optvLead%3d3"><img class="margin -right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_user_white.png" width="20" /> Sign In</a>
                                            <span class="link-divider"></span>
                                            <a title="Join" href="https://www.dealerrater.com/register/?ReturnUrl=https%3a%2f%2fwww.dealerrater.com%2fconsumer%2fdealer%2f23685%2freviewsnew%3fpage%3d1%26filter%3dONLY_POSITIVE%26__optvLead%3d3">Join</a>
                                    </div>
                                </div>
                                    <div id="dp-signin-notify" class="dr-info">
                                        <div class="table width-100">
                                            <div class="td valign-middle">
                                                <img class="margin-right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-notification-bell.png" width="40" />
                                            </div>
                                            <div class="td text-left valign-middle">
                                                <p class="font-18 bold margin-bottom-none line-height-125">
                                                    Dealers, sign in to see your Dealer Panel.
                                                </p>
                                            </div>
                                            <div class="td valign-top">
                                                <img class="close-notify pointer margin-left-lg margin-right-md" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-notification-close.png" width="20" />
                                            </div>
                                        </div>
                                    </div>
                            </div>

                            <div id="userHeaderMenu" class="hidden text-left pad-left-lg pad-top-md pad-bottom-md">
                                    <a title="Reviews" href="/consumer/account/reviews" class="block">Reviews</a>
                                    <a title="Profile" href="/consumer/account/profile" class="block">Profile</a>
                                    <a title="Settings" href="/consumer/account/profile" class="block">Settings</a>
                                
                                <a title="Sign Out" href="/common/auth/logout?returnUrl=https%253a%252f%252fwww.dealerrater.com%252fconsumer%252fdealer%252f23685%252freviewsnew%253fpage%253d1%2526filter%253dONLY_POSITIVE%2526__optvLead%253d3" class="block">Sign Out</a>
                            </div>
                        </div>
                    </div>

                    <!-- primary nav -->
                    <div id="navWrapperHeader" class="col-xs-12 fill-height bg-white">
                        <div class="header-wrapper">
                            <div class="col-xs-12 margin-none padding-none pad-right-none fill-height logo-container pad-left-none">

                                <!-- logo -->
                                
    <div class="pull-left pad-sm pad-left-none" id="logoWrapper">
        <a   href="https://www.dealerrater.com/"    class="pad-top-md pad-bottom-md block"><img height="87" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/locales/en-US/logo_dealerrater_updated.png" /></a>
    </div>



                                <div id="switcherWrapper" class="pull-right fill-height relative ">
                                    <div class="table fill-height pad-top-sm">

                                        <div class="tr ">
                                            <div class="td text-right fill-height nav-text-bar">
                                                <div class="inline-block pad-left-sm margin-top-mdlg relative">
                                                        <input type="text" class="input-sm search-input border header-search-input " id="headerAutoComplete" autocomplete="off" placeholder="Search">
                                                </div>

                                            </div>
                                        </div>


                                        <div class="tr">

                                            
    <div id="primaryNavTabsContainer" class="warbutton-nav td text-right fill-height pull-right margin-right-none">
        <!-- primary nav option -->
        <div class="inline-block primary-nav-option relative">
            <div class="quick-menu-tab pad-left-none">
                    <a href="https://www.dealerrater.com/reviews/" onclick="recordEvent('Global-Header', 'dealer-reviews_click', location.href, null, false);" title="Dealer Reviews" class="bold active ">Dealer Reviews</a>
            </div>
        </div>

        <!-- primary nav option -->
        <div class="inline-block primary-nav-option relative">
            <div class="quick-menu-tab">
                    <a href="https://www.dealerrater.com/service/" onclick="recordEvent('Global-Header', 'service-reviews_click', location.href, null, false);" title="Service Reviews" class="bold black ">Service Reviews</a>
            </div>
        </div>

        <!-- primary nav option -->
        <div class="inline-block primary-nav-option relative">
            <div class="quick-menu-tab">
                    <a class="bold black " onclick="recordEvent('Global-Header', 'cars-for-sale_click', location.href, null, false);" href="https://www.dealerrater.com/classifieds/" title="Cars for Sale">Cars for Sale</a>                    
            </div>
        </div>

        <div class="inline-block primary-nav-option war">
            <div class="quick-menu-tab">
                <a id="warButton" class="black primary-button orange" onclick="recordEvent('Global-Header', 'write-review_click', location.href, null, false);" href="/consumer/writereviews/search" title="Write a Review">Write a Review</a>
            </div>
        </div>

    </div>



                                        </div>

                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>

                </div>
            </header>

            <div id="mobileSearch" class="col-xs-12 bg-grey-lt border-top border-bottom">
                <input type="text" class="search-input border header-mobile-search-input fill-width pad-sm font-16" id="mobileAutoComplete" autocomplete="off" placeholder="Search">
            </div>
            <!-- CONTENT -->
            <content class="fill-width fill-height">
                <div id="contentInner" class="fill-width bg-grey-lt clear-fix">
                    








<div class="block clear-fix pad-top-lg" id="pageContainer">
    <div class="section-container pad-none pad-bottom-lg clear-fix text-left col-xs-12" id="reviewsSection">
        <div id="overview" class="col-xs-12 pad-none">

<a href="#" id="mobileBack" class="pull-left secondary-button teal margin-top-md margin-bottom-mdlg" onclick="toggleMobilePage()" style="display: none !important;"><span class="glyphicon glyphicon-arrow-left"></span> Back</a>

<div id="collapseAllSalesPeople" class="col-xs-12 margin-none pad-none bg-grey display-none bolder">
    <div class="col-xs-12 pad-none pad-top-md pad-bottom-sm border-bottom bg-white">
        <div class="col-xs-1 pad-none pad-left-sm bg-white  pad-bottom-sm">
            <img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/close-x-orange.png" width="25" />
        </div>
        <div class="col-xs-10 pad-none font-16 text-center bg-white pad-top-xs">
            <span>All Salespeople</span>
        </div>
        <div class="col-xs-1 pad-none bg-white"></div>
    </div>
    <div class="col-xs-12 text-left font-16 bolder pad-none pad-left-md pad-top-lg margin-left-sm bg-grey">
        Sales Department
    </div>
</div>

    <!-- PERSISTENT NAV -->
    <div class="width-100 bg-grey-lt-md box-shadow-bottom-extra-lt display-none" id="persistentNav">
        <div class="persistentNavWrapper">
            <div class="col-xs-12 hidden-xs" style="line-height: 64px;">
                <span class="font-28 bolder pull-left pad-left-sm line-height-125 pad-top-md notranslate black">McKaig Chevrolet Buick - A Dealer For The People</span>
                <div class="clear-fix wide-layout line-height-1 text-center">
                    <div>
                            <a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-review-23685/" onclick="recordEvent('Dealer-Profile', 'Persistent_Overview_click', '23685', null, false);" class="black bolder font-14 letter-spacing-1 uppercase margin-right-xl inline-block pad-top-lg pad-left-lg pad-right-lg pad-bottom-md">Overview</a>
                        
                            <a href="/sales/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-Employees-23685/#link" onclick="recordEvent('Dealer-Profile', 'Persistent_Employees_click', '23685', null, false);" class=" black bolder font-14 margin-right-xl letter-spacing-1 uppercase inline-block pad-top-lg pad-bottom-md pad-left-lg pad-right-lg">Employees</a>
                        <a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/#link" onclick="recordEvent('Dealer-Profile', 'Persistent_Reviews_click', '23685', null, false);" class="active black bolder font-14 margin-right-xl letter-spacing-1 uppercase inline-block pad-top-lg pad-bottom-md pad-left-lg pad-right-lg">Reviews (2,009)</a>
                            <a href="/classifieds/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-cars-23685/" onclick="recordEvent('Dealer-Profile', 'Persistent_Inventory_click', '23685', null, false);" class=" black bolder font-14 letter-spacing-1 uppercase inline-block pad-top-lg pad-bottom-md pad-left-lg pad-right-lg">Inventory (74)</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

<div class="col-xs-12 pad-none mobile-hide text-center">
    <div class="col-xs-12 pad-md pad-top-none overview-section">
            <a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-review-23685/" class=" no-wrap relative overview-nav-link-teal pull-left ctaLink" id="dealerLink">
                <span class="notranslate"><img class="valign-bottom" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-dealer-car-white.png" /></span> <span>Dealership</span>
            </a>
            <a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-service-23685/" onclick="recordEvent('Dealer-Profile', 'Service-Center-tab_click', '23685', null, false);" class=" relative overview-nav-link pull-left ctaLink" id="serviceLink">
                <span class="notranslate"><img class="wrench-icon valign-bottom" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-service-wrench-teal.png" /></span><span class="service-btn-text"> Service</span>
            </a>
            <a href="/consumer/writereviews/23685?source=drp" class="primary-button orange pull-right ctaLink visible-sm">
                <span class="notranslate"><img class="valign-bottom star-icon display-none" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-star-white.png" /></span> <span class="review-btn-text">Write a review</span>
            </a>
    </div>
            <div class="col-xs-12 pad-left-md pad-right-md">

<div class="col-xs-12 pad-none margin-right-md margin-bottom-md">
    <div class="col-xs-12 margin-top-md dr-info">
        <div class="table width-100">
            <div class="td notify-icon-td valign-middle">
                <div class="pull-left">
                    <img class="margin-right-md" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-notification-bell.png" width="40" />
                </div>
                <div class="pull-left bolder font-14 covid19 uppercase letter-spacing-2">
                    <span>COVID-19</span><br />
                    <span>Response</span>
                </div>
            </div>
            <div class="td valign-middle">
                <div class="table width-100 hidden-xs extra-service-table bolder font-14">
                        <div class="td extra-service">Home Delivery</div>
                                            <div class="td extra-service">Service Pickup & Delivery</div>
                                            <div class="td extra-service">No Contact Transactions</div>
                                            <div class="td extra-service">Virtual Appointments</div>
                                            <div class="td extra-service">Home Test Drives</div>
                                            <div class="td extra-service">Vehicle Sanitization</div>
                                            <div class="td"></div>
                </div>
            </div>
        </div>
        <div class="col-xs-12 visible-xs text-left bolder font-14" id="mobileCovidOptions">
            <ul class="margin-bottom-none">
                    <li>Home Delivery</li>
                                    <li>Service Pickup & Delivery</li>
                                    <li>No Contact Transactions</li>
                                    <li>Virtual Appointments</li>
                                    <li>Home Test Drives</li>
                                    <li>Vehicle Sanitization</li>
            </ul>
        </div>
    </div>
</div>


<style>
    .notify-icon-td {
        width: 140px;
    }
    .covid19 {
        color: #b37a04;
    }
    #mobileCovidOptions {
        padding-left: 65px;
    }

        #mobileCovidOptions li {
            padding-top: 5px;
        }

    .extra-service-table {
        height: 40px;
        background: transparent !important;
    }

    .extra-service {
        text-align: center;
        padding: 0 10px;
        border-right: 1px solid #d2d2d2;
        vertical-align: middle;
    }

        .extra-service:last-of-type {
            border-right: none;
        }
    .contact-covid {
        font-size: 13px !important;
        background-color: #fdac06;
    }
    .button-col {
        width: 145px;
    }

    @media (max-width:767px) {
        .notify-icon-td {
            width: 100%;
        }
    }


    @media (max-width: 991px) and (min-width: 768px) {
        

    .extra-service-table{ width: auto;}
        .extra-service {
            display: block !important;
            float: left;
            margin: 2px 0 2px;
        }
        .button-col-tablet.visible-sm {
            width: 145px;
            display: table-cell !important;
        }
        
        }
    
    
</style>
            </div>
        <div class="col-xs-12 pad-none margin-top-md">
        <div class="col-xs-12 col-sm-9 pad-none pad-bottom-md">
            <div class="col-xs-12 text-left pad-left-md hidden-xs">
                <!-- certified badge, show nothing if not certified -->
                
                    <div class="pull-left pad-right-mdlg pad-bottom-md relative" id="badge">
                        <img class="badge-tooltip pointer" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/badge-certified-dealer.png" />
                        <div class="absolute pad-sm font-12 bold display-none" id="badge-tooltip">This dealership is a DealerRater&reg; Certified Dealer and is committed to providing quality customer service.</div>
                    </div>
                <!-- end badge -->

                <div class="overflow-auto dealer-info">
                    <h1 class="h1-header margin-top-md notranslate" id="dealerName">McKaig Chevrolet Buick - A Dealer For The People</h1>

                    <!-- mobile rating-->
                    <div class="pull-left margin-top-sm margin-bottom-sm visible-xs">
                        <div class="rating-static rating-49 margin-top-none pull-right margin-right-none"></div>
                        <span class="pull-right font-22 bolder lt-grey pad-right-md border-right margin-right-md line-height-1">4.9</span>
                    </div>
                    <p class="visible-xs font-16 italic margin-none width-100 pull-left">2,009 Lifetime Reviews</p>
                    <!-- end mobile rating-->
                    <span class="black font-16 notranslate" id="dealerAddress">
                        <span>1110 E Broadway Ave (US 80 @ E Loop 485)</span>,

                        <a class="black" title="Chevrolet Dealers near Gladewater, TX" href="/directory/75647/Chevrolet/"><span>Gladewater</span>, <span>Texas</span> <span>75647</span></a>
                    </span>
                    <a href="#" class="hidden-xs small-text block margin-bottom-mdlg" onclick="getDirections(); recordEvent('Dealer-Profile', 'Directions_click', '23685', null, true);">Directions</a>

                    <div class="hidden-xs">
                            <div class="inline-block pad-right-md phone"><span class="small-text">Sales:</span> <span>(903) 374-0469</span></div>
                                                    <div class="inline-block pad-right-md pad-left-md line-height-1 border-left-orange phone"><span class="small-text">Service:</span> <span>(903) 374-0470</span></div>
                                                    <div class="inline-block pad-left-md line-height-1 border-left-orange phone"><span class="small-text">Parts:</span> <span>(903) 374-0471</span></div>
<br />
                    </div>
                    <div class="font-16 col-xs-10 margin-none pad-none">
                    </div>
                        <!-- MOBILE Hours section -->
                            <div class="visible-xs dealer-hours">
                            </div>
                </div>
                <!-- END MOBILE Hours section -->
                <!-- END MOBILE nav section -->


                        <a href="tel:(903) 374-0469" class="clear-fix pull-left block visible-xs secondary-button orange width-100 mobile-link margin-top-sm" onclick="clickToCallEvent();">Call (903) 374-0469</a>

            </div>
                <div class="col-xs-12 visible-xs">
                    <p class="boldest font-24 margin-bottom-none">McKaig Chevrolet Buick - A Dealer For The People</p>
                    <p class="font-14 dr-grey">Gladewater, TX</p>
                </div>

                    <div class="col-xs-12 pad-none visible-xs margin-top-md bg-white">
                        <div class="table width-100 mobile-dpp-nav">
                                <div class="td valign-middle ">
                                    <a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-review-23685/" class="font-12 bolder letter-spacing-1 uppercase black">Overview</a>
                                </div>
                                                            <div class="td valign-middle ">
                                    <a href="/sales/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-Employees-23685/#mobileLink" class="uppercase black font-12 bolder letter-spacing-1">Employees</a>
                                </div>
                            <div class="td valign-middle active">
                                <a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/#mobileLink" class="font-12 uppercase black bolder letter-spacing-1">Reviews</a>
                            </div>
                                <div class="td valign-middle ">
                                    <a href="/classifieds/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-cars-23685/#mobileLink" class="uppercase black font-12 bolder letter-spacing-1">Vehicles</a>
                                </div>
                        </div>
                    </div>
                <div class="col-xs-12 visible-xs margin-top-lgxl">
                    <div class="inline-block">
                        <div class="pad-right-md valign-middle inline-block text-right mobile-rating">
                            <span class="bolder font-40">
                                4.9
                            </span>
                        </div>
                        <div class="pad-left-sm valign-middle inline-block text-left">
                            <div class="rating-static margin-top-none margin-right-none inline-block rating-49"></div>
                        </div>
                    </div>


                </div>
                <div class="col-xs-12 visible-xs margin-top-mdlg">
                    <span class="font-14 italic">
                        2,009 Lifetime Reviews
                    </span>
                    <span class="font-14 pad-left-sm pad-right-sm">&bull;</span>
                    <a href="/consumer/writereviews/23685?source=drp" class="small-text link">Review Dealership</a>
                </div>
                
                    <div class="col-xs-12 visible-xs margin-top-mdlg">
                        <div class="col-xs-12 pad-none about-us-mobile text-left font-18">
                                <span class="font-18 bolder block margin-bottom-md">Please call for our &quot;Concierge Services&quot; and let Susie Scadden or Freddie Tomlinson know if you have any questions or issues. We are &quot;FOR The People&quot; and that means we are all about &quot;helping you&quot; with your transportation issues.
&quot;We believe everyone deserves to drive a nicer, newer car today that is safe, reliable and fun to drive for as long as they wish to own it.&quot;</span>
                                                            <span class="font-18 margin-bottom-none block">McKaig Chevrolet Buick is A Dealer &quot;FOR the People.&quot;(R) What makes us different? Why are we special?
&quot;We believe everyone deserves to drive a nicer, newer(R) car today that is safe, reliable and fun to drive for as long as they wish to own it.&quot;

&quot;For The People&quot;(R) Pledge:
We are a Dealer FOR The People. That means we put our customers first, before everything else. We believe that everyone deserves to drive a nicer, newer car today. Our business is not selling cars. Our business is finding solutions to the everyday problems that keep most people stuck in a car they hate. We&#39;re on a mission to change the world by helping people get the car they want and deserve. Our goal is to make you a customer guest for Life!
 Kent &amp; Mark Abernathy, &quot;Brothers of Savings&quot; 

 FOR The People

Reviewers Rank us #1 in East Texas

Home of Non-Commissioned Sales Solution Specialists - No Sharks in the Showroom
     This means we don&#39;t try to push product or sell you anything not in your best interest as our Solution Specialists make the same thing on whatever you buy. We help you decide what you want to buy!

Se Habla Espanol

Home of the Buyer&#39;s Bill of Rights!

-Home of Non-Commission Sales Solution Staff! No Bullies in the Showroom!
-Se Habla Espa&#241;ol!

&quot;We believe everyone deserves to drive a nicer, newer(R) car that is safe, reliable and fun to drive for as long as they wish to own it.&quot;</span>
                        </div>

                            <a href="#" class="small-text block display-none" id="readMoreAboutMobile">Read More</a>
                    </div>
                <div class="col-xs-12 visible-xs margin-top-lg">
                            <a href="tel:(903) 374-0469" class="clear-fix secondary-button teal width-100 mobile-link margin-top-sm mobileCall" onclick="clickToCallEvent();">Call Dealership (903) 374-0469</a>
                </div>
                        <!-- MOBILE Hours section -->
 <div class="col-xs-12 visible-xs margin-top-lg dealer-hours"></div>
                          <div class="col-xs-12 visible-xs margin-top-lg line-height-150">
                              <p class="bold font-18 margin-bottom-none">
                                  1110 E Broadway Ave (US 80 @ E Loop 485)
                              </p>
                              <p class="bold font-18 margin-bottom-none">
                                  Gladewater, TX
                              </p>
                              <p class="bold font-18 margin-bottom-none">
                                  75647
                              </p>
                              <a href="http://maps.apple.com/maps?daddr=1110 E Broadway Ave (US 80 @ E Loop 485)+Gladewater+TX" onclick="recordEvent('Dealer-Profile', 'Directions_click', '23685', null, true); return true;" class="small-text link teal uppercase">Directions</a>
                          </div>
                        
                        <div class="col-xs-12 pad-none margin-top-lg text-center visible-xs">
                                <div class="col-xs-12 pad-none" onclick="recordEvent('Dealer-Profile', 'Ad_click', '23685', null, false); recordAdobeDataLayerBannerClick();" data-ad-id="51654">
                                    <a href="http://www.mckaigchevrolet.com/" id="adId51654" onclick="window.open(&quot;http://www.mckaigchevrolet.com/&quot;)" target="_blank"><img src="https://cdn-user.dealerrater.com/ads/ads/260-542015104508AM.jpg" style="border-width: 0px; border-style: none;max-width:300px;max-height:90px;" /></a>
                                </div>
                            <a id="mobileLink"></a>
                        </div>
                    </div>
        <div class="absolute-right text-right pad-top-lg pad-left-none margin-right-lg hidden-xs">
            <h5 class="no-format small-text margin-none pad-bottom-sm">
Excellent            </h5>
                <h5 class="no-format small-text margin-none margin-bottom-sm">99% Recommended</h5>
            <div class="pull-right margin-top-sm margin-bottom-sm rating-details">
                <div class="rating-static rating-49 margin-top-none pull-right margin-right-none"></div>
                <span class="pull-right font-22 bolder lt-grey pad-right-md border-right margin-right-md line-height-1">4.9</span>
            </div>
            <p class="font-16 italic margin-none clear-fix">2,009 Lifetime Reviews</p>

            <!-- TABLET awards section -->
            <div class="col-xs-12 pad-none margin-top-md visible-sm">
<img class="view-awards pointer" src="https://cdn-user.dealerrater.com/doty/2019/US/seal2/state/9-TX.png" width="95" />                                    <a href="#" class="small-text margin-top-md view-awards">View <span class='boldest'>10</span> Awards</a>
            </div>
            <!-- END TABLET awards section -->
        </div>
        <div id="rating-details" class="display-none border-all pad-md bg-white absolute arrow-right">
            <div class="clearfix">
                Customer Service
                <div class="rating-static-indv rating-50 margin-none pull-right"></div>
            </div>
            <div class="clearfix">
                Quality of Work
                <div class="rating-static-indv rating-50 margin-none pull-right"></div>
            </div>
            <div class="clearfix">
                Friendliness
                <div class="rating-static-indv rating-50 margin-none pull-right"></div>
            </div>
            <div class="clearfix">
                Pricing
                <div class="rating-static-indv rating-48 margin-none pull-right"></div>
            </div>
            <div class="clearfix">
                Overall Experience
                <div class="rating-static-indv rating-49 margin-none pull-right"></div>
            </div>
            <div class="col-xs-12 pad-none line-height-125 margin-top-md">
                A dealership's rating is calculated by averaging scores from reviews received in the past 24 months
            </div>
        </div>
    </div>
    <div class="width-100 table pad-md hidden-xs">
        <div class="td pad-right-lg valign-top ad-column">
            <!-- === AD SPACE === -->
                <div class="col-xs-12 text-left pad-none bg-white border-all adspace text-center" onclick="recordEvent('Dealer-Profile', 'Ad_click', '23685', null, false); recordAdobeDataLayerBannerClick();" data-ad-id="75431">
                    <a href="http://mckaig.net/what-is-for-the-people-video/" id="adId75431" onclick="window.open(&quot;http://mckaig.net/what-is-for-the-people-video/&quot;)" target="_blank"><img src="https://cdn-user.dealerrater.com/ads/ads/260-523201893951AM.jpg" style="border-width: 0px; border-style: none;max-width:300px;max-height:250px;" /></a>
                </div>
                            <a href="https://www.mckaigchevrolet.com/" onclick="viewDealerWebsiteEvent();" target="_blank" class="dealer-website clear-fix small-text block pad-top-md text-center">Visit Dealership Website</a>
        </div>

            <div class="td pad-right-xxl pad-left-md valign-top pad-top-none text-left about-us-column">
                <div class="col-xs-12 pad-none about-us font-18">
<span class="font-18 bolder block margin-bottom-md">Please call for our &quot;Concierge Services&quot; and let Susie Scadden or Freddie Tomlinson know if you have any questions or issues. We are &quot;FOR The People&quot; and that means we are all about &quot;helping you&quot; with your transportation issues.
&quot;We believe everyone deserves to drive a nicer, newer car today that is safe, reliable and fun to drive for as long as they wish to own it.&quot;</span>                                            <span class="font-18 margin-bottom-none block">McKaig Chevrolet Buick is A Dealer &quot;FOR the People.&quot;(R) What makes us different? Why are we special?
&quot;We believe everyone deserves to drive a nicer, newer(R) car today that is safe, reliable and fun to drive for as long as they wish to own it.&quot;

&quot;For The People&quot;(R) Pledge:
We are a Dealer FOR The People. That means we put our customers first, before everything else. We believe that everyone deserves to drive a nicer, newer car today. Our business is not selling cars. Our business is finding solutions to the everyday problems that keep most people stuck in a car they hate. We&#39;re on a mission to change the world by helping people get the car they want and deserve. Our goal is to make you a customer guest for Life!
 Kent &amp; Mark Abernathy, &quot;Brothers of Savings&quot; 

 FOR The People

Reviewers Rank us #1 in East Texas

Home of Non-Commissioned Sales Solution Specialists - No Sharks in the Showroom
     This means we don&#39;t try to push product or sell you anything not in your best interest as our Solution Specialists make the same thing on whatever you buy. We help you decide what you want to buy!

Se Habla Espanol

Home of the Buyer&#39;s Bill of Rights!

-Home of Non-Commission Sales Solution Staff! No Bullies in the Showroom!
-Se Habla Espa&#241;ol!

&quot;We believe everyone deserves to drive a nicer, newer(R) car that is safe, reliable and fun to drive for as long as they wish to own it.&quot;</span>
                </div>

                    <a href="#" class="small-text block display-none" id="readMoreAbout">Read More</a>
                                    <a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-review-23685/#amenities" onclick="recordEvent('Dealer-Profile', 'View-Photos-Amenities_click', '23685', null, true);" class="small-text block margin-top-lg">
View Photos & Amenities                    </a>

                    <div class="hidden-xs dealer-hours">
                    </div>
            </div>

            <div class="td text-center valign-top awards-column hidden-sm">
                
<img class="view-awards pointer" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/locales/en-US/csa/2020-seal.png" width="160" />
                    <a href="#" onclick="recordEvent('Dealer-Profile', 'View-Awards-link_click', '23685', null, true);" class="small-text block margin-top-md view-awards">View <span class='boldest'>10</span> Awards</a>
            </div>
        <div class="td"></div>
    </div>
            <div id="link" class="col-xs-12 pad-none bg-grey-lt-md margin-top-lg margin-bottom-lg text-center review-page-nav hidden-xs">
                    <a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-review-23685/" onclick="recordEvent('Dealer-Profile', 'Persistent_Overview_click', '23685', null, false);" class="black bolder font-14 letter-spacing-1 uppercase margin-right-xl inline-block pad-top-lg pad-left-lg pad-right-lg pad-bottom-md">Overview</a>
                    <a href="/sales/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-Employees-23685/#link" onclick="recordEvent('Dealer-Profile', 'Persistent_Employees_click', '23685', null, false);" class=" black bolder font-14 margin-right-xl letter-spacing-1 uppercase inline-block pad-top-lg pad-bottom-md pad-left-lg pad-right-lg">Employees</a>
            <a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/#link" onclick="recordEvent('Dealer-Profile', 'Persistent_Reviews_click', '23685', null, false);" class="active black bolder font-14 letter-spacing-1 uppercase margin-right-xl inline-block pad-top-lg pad-left-lg pad-right-lg pad-bottom-md">Reviews (2,009)</a>
                <a href="/classifieds/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-cars-23685/#link" onclick="recordEvent('Dealer-Profile', 'Persistent_Inventory_click', '23685', null, false);" class=" black bolder font-14 letter-spacing-1 uppercase inline-block pad-top-lg pad-bottom-md pad-left-lg pad-right-lg">Inventory (74)</a>
        </div>
</div>

<!--- AWARDS CONTENT -->
    <div class="display-none" id="awardsDialog">
        <h3 class="popup-title">
            <span class="hidden-xs hidden-sm"><span class='notranslate'>McKaig Chevrolet Buick - A Dealer For The People</span> Awards</span>
            <span class="visible-xs visible-sm bolder pad-left-lg block pull-left">Awards</span>
        </h3>
        <a href="#" class="popup-close"></a>
        <div class="popup-content-wrapper">
            <div class="col-xs-12 pad-none" id="awardsWrapper">
                    <div class="col-xs-12 pad-none">
                            <div class="col-xs-6 col-sm-4 pad-none text-center margin-bottom-lg award"><img class="doty-award-image" height="165" src="https://cdn-user.dealerrater.com/doty/2019/US/seal2/state/9-TX.png" /></div>
                            <div class="col-xs-6 col-sm-4 pad-none text-center margin-bottom-lg award"><img class="doty-award-image" height="165" src="https://cdn-user.dealerrater.com/doty/2018/US/seal2/state/7-TX.png" /></div>
                            <div class="col-xs-6 col-sm-4 pad-none text-center margin-bottom-lg award"><img class="doty-award-image" height="165" src="https://cdn-user.dealerrater.com/doty/2017/US/seal2/state/7-TX.png" /></div>
                            <div class="col-xs-6 col-sm-4 pad-none text-center margin-bottom-lg award"><img class="doty-award-image" height="165" src="https://cdn-user.dealerrater.com/doty/2015/US/seal2/state/7-TX.png" /></div>
                    </div>

                    <div class="col-xs-12 pad-none">
                            <div class="col-xs-6 col-sm-4 pad-none text-center margin-bottom-lg award"><img class="csa-award-image" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/locales/en-US/csa/2020-seal.png" width="130" /></div>
                            <div class="col-xs-6 col-sm-4 pad-none text-center margin-bottom-lg award"><img class="csa-award-image" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/locales/en-US/csa/2019-seal.png" width="130" /></div>
                            <div class="col-xs-6 col-sm-4 pad-none text-center margin-bottom-lg award"><img class="csa-award-image" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/locales/en-US/csa/2018-seal.png" width="130" /></div>
                            <div class="col-xs-6 col-sm-4 pad-none text-center margin-bottom-lg award"><img class="csa-award-image" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/locales/en-US/csa/2017-seal.png" width="130" /></div>
                            <div class="col-xs-6 col-sm-4 pad-none text-center margin-bottom-lg award"><img class="csa-award-image" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/locales/en-US/csa/2016-seal.png" width="130" /></div>
                            <div class="col-xs-6 col-sm-4 pad-none text-center margin-bottom-lg award"><img class="csa-award-image" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/locales/en-US/csa/2015-seal.png" width="130" /></div>
                    </div>
            </div>
        </div>
    </div>

    <!-- HOURS CONTENT-->
    <div class="display-none" id="hoursDialog">
        <h3 class="popup-title">
            <span class="hidden-xs hidden-sm"><span class='notranslate'>McKaig Chevrolet Buick - A Dealer For The People</span> Hours</span>
            <span class="visible-xs visible-sm bolder pad-left-lg block pull-left">Hours</span>
        </h3>
        <a href="#" class="popup-close"></a>
        <div class="popup-content-wrapper">
            <div class="col-xs-12 pad-none" id="hoursWrapper">
                <!-- hours -->
                    <div class="col-xs-12 col-sm-6 hours-section pad-left-none pad-right-lg margin-bottom-md">
                        <p class="bold uppercase letter-spacing-1 orange-lt margin-none pad-top-md">Sales/Showroom</p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Monday</span>
                                <span class="pull-right">
                                    8:00 AM
                                        - 6:00 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Tuesday</span>
                                <span class="pull-right">
                                    8:00 AM
                                        - 6:00 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Wednesday</span>
                                <span class="pull-right">
                                    8:00 AM
                                        - 6:00 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Thursday</span>
                                <span class="pull-right">
                                    8:00 AM
                                        - 6:00 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Friday</span>
                                <span class="pull-right">
                                    8:00 AM
                                        - 6:00 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Saturday</span>
                                <span class="pull-right">
                                    9:00 AM
                                        - 6:00 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Sunday</span>
                                <span class="pull-right">
                                    Closed
                                </span>
                            </p>

                    </div>
                    <div class="col-xs-12 col-sm-6 hours-section pad-left-none pad-right-lg margin-bottom-md">
                        <p class="bold uppercase letter-spacing-1 orange-lt margin-none pad-top-md">Service</p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Monday</span>
                                <span class="pull-right">
                                    7:30 AM
                                        - 5:30 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Tuesday</span>
                                <span class="pull-right">
                                    7:30 AM
                                        - 5:30 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Wednesday</span>
                                <span class="pull-right">
                                    7:30 AM
                                        - 5:30 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Thursday</span>
                                <span class="pull-right">
                                    7:30 AM
                                        - 5:30 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Friday</span>
                                <span class="pull-right">
                                    7:30 AM
                                        - 5:30 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Saturday</span>
                                <span class="pull-right">
                                    8:00 AM
                                        - 1:00 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Sunday</span>
                                <span class="pull-right">
                                    Closed
                                </span>
                            </p>

                    </div>
                    <div class="col-xs-12 col-sm-6 hours-section pad-left-none pad-right-lg margin-bottom-md">
                        <p class="bold uppercase letter-spacing-1 orange-lt margin-none pad-top-md">Parts</p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Monday</span>
                                <span class="pull-right">
                                    7:30 AM
                                        - 5:30 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Tuesday</span>
                                <span class="pull-right">
                                    7:30 AM
                                        - 5:30 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Wednesday</span>
                                <span class="pull-right">
                                    7:30 AM
                                        - 5:30 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Thursday</span>
                                <span class="pull-right">
                                    7:30 AM
                                        - 5:30 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Friday</span>
                                <span class="pull-right">
                                    7:30 AM
                                        - 5:30 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Saturday</span>
                                <span class="pull-right">
                                    8:00 AM
                                        - 1:00 PM
                                </span>
                            </p>
                            <p class="margin-none font-16">
                                <span class="capitalize">Sunday</span>
                                <span class="pull-right">
                                    Closed
                                </span>
                            </p>

                    </div>
            </div>
        </div>
    </div>
<div class="floating-contact">
    <img class="inline-block pad-bottom-md" height="35" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-contact-white-email.png" />
    Contact Us
</div>

<div class="floating-form display-none">
    <div class="col-xs-12 pad-none dr-form-no-emp display-none">
        <p class="font-24 bold line-height-125 text-center">Contact McKaig Chevrolet Buick - A Dealer For The People</p>
    </div>
    <div class="col-xs-12 pad-none dr-form-emp">
        <a href="#" class="dr-form-emp-back teal bold font-13 margin-bottom-md uppercase letter-spacing-2 block display-none"><span class="glyphicon glyphicon-chevron-left	teal font-13 pad-right-sm"></span>Back</a>
        <p class="font-24 bold margin-bottom-none line-height-1 margin-bottom-sm hide-select">Featured Employees</p>
        <p class="font-24 bold line-height-125 text-center skipped-heading margin-bottom-none display-none">Contact McKaig Chevrolet Buick - A Dealer For The People</p>
        <p class="font-16 hide-select">Select one of the employees below to send them a message.</p>
        <div id="allEmployees">
        </div>
        <a href="#" class="dr-form-skip-emp teal bold font-13 uppercase letter-spacing-2 block margin-top-md text-center display-none">Skip this step</a>
    </div>
    <div class="col-xs-12 pad-none dr-form display-none">
        <form id="floatingContactForm">
            <input name="DealerId" value="23685" type="hidden" id="DealerId" />

            <input name="DealerName" value="McKaig Chevrolet Buick - A Dealer For The People" type="hidden" id="DealerName" />
            <input name="EmployeeId" type="hidden" id="selectedEmployeeId" />
            <input name="EmployeeName" type="hidden" id="selectedEmployeeName" />
            <p class="font-24 bold line-height-1 display-none">Contact McKaig Chevrolet Buick - A Dealer For The People</p>
            <label for="floatingName">Name</label>
            <input class="required" id="floatingName" name="floatingName" type="text" data-val="true" data-val-length="Name can be no more than 50 characters." data-val-length-max="50" data-val-required="What's your name?" />
            <span class="field-validation-error" data-valmsg-for="floatingName" data-valmsg-replace="true"></span>

            <label for="floatingEmail">Email</label>
            <input class="required" id="floatingEmail" name="floatingEmail" type="text" data-val="true" data-val-email="Please enter a valid email." data-val-required="What's your email?" />
            <span class="field-validation-error" data-valmsg-for="floatingEmail" data-valmsg-replace="true"></span>


            <label for="floatingMessage">Message <span class="italic font-14 regular"> (Optional)</span></label>
            <textarea id="floatingMessage" name="floatingMessage" class="width-100"></textarea>
            
            <input id="sendMessage" class="primary-button teal margin-top-lg" type="submit" value="Send Message" />

        </form>
    </div>
    <div class="col-xs-12 pad-none text-center dr-success display-none">
        <img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup-green.png" />
        <p class="font-24 bolder margin-top-mdlg">Thanks for Your Message!</p>
        <p class="font-16">You'll be hearing from McKaig Chevrolet Buick - A Dealer For The People shortly.</p>
    </div>

</div>

<div class="floating-close display-none text-center">
    <img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-white-x.png" width="30" />
</div>

<style>
             .contact-btn-wrapper {
                 margin-left: 2px;
             }
             .ctaLink, .chatLink {
                 font-size: 14px !important;
             }

             .claim-dealer-tablet .td {
                 min-width: 250px;
             }

             #dealerLink {
                 -ms-border-bottom-right-radius: 0;
                 border-bottom-right-radius: 0;
                 -ms-border-top-right-radius: 0;
                 border-top-right-radius: 0;
                 border: 1px solid #00adc2;
             }
             #serviceLink {
                 -ms-border-bottom-left-radius: 0;
                 border-bottom-left-radius: 0;
                 -ms-border-top-left-radius: 0;
                 border-top-left-radius: 0;
             }
             #dealerLink:after {
                 content: '';
                 position: absolute;
                 top: 100%;
                 left: 0;
                 right: 0;
                 margin: 0 auto;
                 width: 0;
                 height: 0;
                 border-left: solid 10px transparent;
                 border-right: solid 10px transparent;
                 border-top: solid 10px #00adc2;
             }
             #overview h5 {
                 font-size: 12px !important;
                 text-transform: uppercase !important;
             }
             .rating-static, .rating-static-indv {
                 background-image: url("https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/bg_star_rating_new_orange_lt.png");
             }
             #rating-details {
                 width: 245px;
                 z-index: 2;
                 top: 9px;
                 right: 190px;
             }
             #badge-tooltip {
                 position: absolute;
                 background: #ffffff;
                 border: 2px solid #00adc2;
                 -ms-border-radius: 20px;
                 border-radius: 20px;
                 padding: 10px;
                 width: 190px;
                 top: 140px;
                 left: -50px;
             }

             #badge-tooltip:after,  #badge-tooltip:before {
                 bottom: 100%;
                 left: 50%;
                 border: solid transparent;
                 content: " ";
                 height: 0;
                 width: 0;
                 position: absolute;
                 pointer-events: none;
             }
             #badge-tooltip:after {
                 border-bottom-color: #ffffff;
                 border-width: 10px;
                 margin-left: -10px;
             }

             #badge-tooltip:before {
                 border-bottom-color: #00adc2;
                 border-width: 13px;
                 margin-left: -13px;
             }
             .about-us {
                 white-space: pre-line;
             }
             .awards-column {
                 width: 180px;
             }
             .claim-column {
                 width: 240px;
             }
             .border-left-orange {
                 border-left: 2px solid #fa7412;
             }

             #awardsWrapper {
                 max-height: 420px;
                 overflow-y: auto;
             }
             .review-page-nav a.active, #persistentNav .active {
                 border-bottom: 3px solid #00adc2;
             }
             #persistentNav{
                 position: fixed;
                 top: 0;
                 left:0;
                 z-index: 1001;
             }
             .persistentNavWrapper{
                 margin: auto;
                 max-width: 1024px !important;
                 clear: both;
             }
             #persistentNav a{
                 padding-bottom: 31px !important;
             }
             .wide-layout {
                 margin-top: -10px;
             }
             #persistentNav .wide-layout a {
                 padding-bottom: 12px !important;
             }
             .ad-column {
                 width: 315px;
             }
             .recommend-column {
                 width: 425px;
             }
             .overflow-auto.dealer-info {
                 padding-bottom: 2px;
             }

             ::-webkit-input-placeholder {
                 font-family: MuseoSans-300;
                 font-style: italic;
                 color: #939293 !important;
                 font-size: 14px;
             }

             ::-moz-placeholder {
                 font-family: MuseoSans-300;
                 font-style: italic;
                 color: #939293 !important;
                 font-size: 14px;
             }

             :-ms-input-placeholder {
                 font-family: MuseoSans-300;
                 font-style: italic;
                 color: #939293 !important;
                 font-size: 14px;
             }

             .claim-this-page-input {
                 height: 45px;
                 width: 95%;
             }

             @media (max-width: 1100px) {
                 #badge-tooltip {
                     left: 0;
                 }
                 #badge-tooltip:after, #badge-tooltip:before {
                     left: 25%;
                 }
             }
             @media (max-width: 975px) {
                 .phone {
                     display: block;
                     border: 0;
                     padding: 0 !important;
                     line-height: 1.5em;
                 }
                 .about-us-column {
                     padding-right: 10px !important;
                 }
                 .recommend-tablet-column {
                     padding-top: 70px !important;
                 }
             }
             @media (max-width: 767px) {
                 #pageContainer, .section-container#reviewsSection {
                     padding: 0 !important;
                 }
                 .overview-section {
                     padding: 0 !important;
                     display: table;
                     width: 100%;
                 }
                 .warLink {
                     margin-top: 10px;
                     display: inline-block !important;
                     float: none !important;
                 }

                
        #dealerLink, #serviceLink{
                     width: 50%;
                     padding: 7px 20px;
                     margin-top: 10px;
                 }
                 #dealerLink:after, #serviceLink:after {
                     display: none;
                 }
                 .overview-section {
                     padding: 0 10px !important;
                 }
                 .mobile-dpp-nav .td.active {
                     background: #05aec1;
                 }
                 .mobile-dpp-nav .td a {
                     display: block;
                     padding-top: 10px;
                     padding-bottom: 10px;
                 }
                 .mobile-dpp-nav .td.active a {
                     color: #fff !important;
                 }
                 .mobileCall {
                     display: inline-block !important;
                     max-width: 375px;
                 }
                 #reviewsSection {
                     background-color:#f8f8f8;
                 }
                 .today-label, .view-all-hours {
                     display: none;
                 }
                 .dealer-hours .view-hours.small-text {
                     color: #05aec1 !important;
                     margin-top: 0 !important;
                 }
                 .view-ab-hours {
                     display: inline-block !important;
                 }
                 .open-today-label, .hours-open, .closed-today {
                     display: inline !important;
                     font-size: 18px;
                     text-transform: none;
                     letter-spacing: normal;
                 }
                 .covid-hours-table, .covid-hours-table .td {
                     display: block;
                 }
                 .covid-hours-table .td {
                     padding-left: 0 !important;
                 }
                 .covid-hours-table .td span {
                     font-size: 18px;
                     text-transform: none;
                     letter-spacing: normal;
                     line-height: 1.25;
                 }
                 .covid-hours-table .bell-icon {
                     display: none;
                 }
                 .hours-open {
                     text-transform: lowercase;
                 }
                 .dealer-hours .small-text{
                     float: none !important;
                 }
                 .dealer-hours .light-green, .dealer-hours .red-dk {
                     display: none;
                 }
                 .mobile-rating {
                     border-right: 1px solid #ccc;
                 }
                 .mobile-rating .font-40 {
                     line-height: 30px;
                 }

        .star-icon {
                     display: inline !important;
                 }
                 #badge {
                     margin-top: 12px;
                 }
                 .badge-tooltip {
                     width: 65px;
                 }
                 #dealerName {
                     font-size: 20px !important;
                 }
                 #dealerAddress {
                     font-size: 14px !important;
                     display: block;
                     float: left;
                     clear: both;
                     margin-top: 10px;
                 }
                 .mobile-link {
                     font-size: 14px !important;
                 }
                 #awardsDialog {
                     padding: 0 !important;
                 }
                 #awardsWrapper {
                     max-height: none;
                     overflow: auto;
                 }
                 .doty-award-image{
                     height: 150px;
                 }
                 .csa-award-image{
                     width: 150px;
                 }
                 #hoursDialog {
                     padding: 0 10px !important;
                 }
                 .claim-dealer-tablet .td {
                     width: 100%;
                     display: block !important;
                 }
                 .claim-dealer-tablet .primary-button.teal, .awards-mobile {
                     display: inline-block !important;
                 }
                 .chatLink.war {
                     float: none !important;
                     display: inline-block !important;
                 }
                 .overview-mobile-nav a.active {
                     background: #107dbf;
                     border-color: #cfe5f2;
                 }
             }
             @media (max-width: 550px) {
                

        .star-icon {
                      display: inline !important;
                      float: left;
                      padding-right: 2px;
                      padding-top: 2px;
                  }

                 .review-btn-text {
                     width: 65px;
                     float: left;
                 }

             }
</style>
        </div>
        <!-- reviews section -->
        <div id="reviews" class="col-xs-12 pad-none mobile-hide">
                <div class="col-xs-12 pad-md pad-top-none pad-bottom-none margin-bottom-lg dr-form">
                    <p class="bolder font-16 margin-bottom-sm">Filter Reviews By Type</p>
                    <select id="review-filter" class="font-18">
                        <option value="">All Reviews</option>
                        <option value="ONLY_SALES">Sales Reviews Only</option>
                        <option value="ONLY_POSITIVE">Only Positive</option>
                        <option value="ONLY_NEGATIVE">Only Negative</option>
                    </select>
                </div>
            <div class="col-xs-12 review-section pad-md pad-top-none pad-bottom-none mobile-hide">
                <div class="col-xs-12 pad-none margin-bottom-lg">
                    <h2 class="clear-fix font-20 bold reviews-of-emp">

                        Showing <span class='boldest'>2,000 positive</span> reviews <span class='boldest'></span>
                    </h2>





<div class="review-entry col-xs-12 text-left pad-none pad-top-lg  border-bottom-teal-lt">
<a name="r7777119"></a>
<div class="col-xs-12 col-sm-3 pad-left-none text-center review-date margin-bottom-md">
    <div class="italic col-xs-6 col-sm-12 pad-none margin-none font-20">January 13, 2021</div>
    <div class="col-xs-6 col-sm-12 pad-none dealership-rating">
        <div class="rating-static visible-xs pad-none margin-none rating-50 pull-right"></div>
        <div class="rating-static hidden-xs rating-50 margin-center"></div>
        <div class="col-xs-12 hidden-xs pad-none margin-top-sm small-text dr-grey">SALES VISIT - NEW</div>
    </div>
</div>
<div class="col-xs-12 col-sm-9 pad-none review-wrapper">
<!-- REVIEW TITLE, USER-->
<div class="margin-bottom-sm line-height-150">
    <h3 class="no-format inline italic-bolder font-20 dark-grey">"This dealership and their team went above and beyond to..."</h3>
    <span class="italic font-18 black notranslate">- aandrewslp</span>
</div>

<!-- REVIEW BODY -->

<div class="tr margin-top-md">
    <div class="td text-left valign-top ">
        <p class="font-16 review-content margin-bottom-none line-height-25">This dealership and their team went above and beyond to get myself and my spouse into new vehicles and lowered our payments!!  AMAZING! from top to bottom!</p>
            <a id="7777119" class="read-more-toggle pointer line-height-25 small-text block margin-bottom-md">Read More</a>
    </div>
</div>

<!-- REVIEW RATINGS - ALL -->
<div class="pull-left pad-left-md pad-right-md bg-grey-lt margin-bottom-md review-ratings-all review-hide">
    <!-- REVIEW RATING - CUSTOMER SERVICE -->
    <div class="table width-100 pad-left-none pad-right-none margin-bottom-md">
        <div class="tr">
            <div class="lt-grey small-text td">Customer Service</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - QUALITY OF WORK -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Quality of Work</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - FRIENDLINESS -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Friendliness</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - PRICING -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Pricing</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - EXPERIENCE -->
        <div class="tr margin-bottom-md">
            <div class="td lt-grey small-text">Overall Experience</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - RECOMMEND DEALER -->
        <div class="tr">
            <div class="lt-grey small-text td">Recommend Dealer</div>
            <div class="td small-text boldest">
                Yes
            </div>
        </div>
    </div>


</div>

<!-- EMPLOYEE SECTION -->
<div class="clear-fix  margin-top-sm">
        <div class="col-xs-12 lt-grey pad-left-none employees-wrapper">
            <div class="small-text">Employees Worked With </div>

                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/employee-placeholder.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal  margin-right-sm emp-660357" data-emp-id="660357" href="/sales/Eric-Goodes-review-660357/">
                                             Eric Goodes
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/ca22768af3f7.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal  margin-right-sm emp-640356" data-emp-id="640356" href="/sales/Taylor-Prickett-review-640356/">
                                             Taylor Prickett
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/307448fc2105.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal  margin-right-sm emp-507162" data-emp-id="507162" href="/sales/Dennis-Smith-review-507162/">
                                             Dennis Smith
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/fcea1d8f0d9d.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal  margin-right-sm emp-479220" data-emp-id="479220" href="/sales/Freddie-Tomlinson-review-479220/">
                                             Freddie Tomlinson
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/338f32ce6a76.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal   emp-507107" data-emp-id="507107" href="/sales/Brandon-McCloskey-review-507107/">
                                             Brandon McCloskey
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                            <div class="col-xs-12 pad-none pad-top-sm ">
                        <span class="small-text">Other Employees :</span>
                    <span class="italic font-13 notranslate">Service department as well!   </span>
                </div>
        </div>
</div>

<!-- SOCIAL MEDIA AND REVIEW ACTIONS -->
<div class="col-xs-12 pad-none review-hide margin-top-lg">
    <div class="pull-left">
        <a href="https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7777119&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People" onclick="window.open('https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7777119&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Twitter"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_twitter_sm.png" /></a>
        <a href="http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7777119" onclick="window.open('http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7777119', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Facebook"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_facebook_sm.png" /></a>
    </div>
    <div class="pull-left margin-left-md">
        <a href="#" onclick="javascript:window.reportReview(7777119); return false;" class="small-text">Report</a> |
        <a href="#" onclick="window.open('/consumer/dealer/23685/review/7777119/print', 'report', 'toolbar=no,scrollbars=yes,location=no,width=720,height=400,resizable=yes'); return false;" class="small-text">Print</a>
    </div>
</div>

<!-- PUBLIC MESSAGES -->

<!-- WAS HELPFUL SECTION -->
<div class="col-xs-12 margin-bottom-lg">
    <div class="pull-right">
        <a href="#" class="helpful-button" onclick="javascript:MarkReviewHelpful(7777119, this); return false;">
            <img class="pull-left margin-right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup.png" /> Helpful <span class="helpful-count display-none" id="helpful_count_7777119">0</span></a>
    </div>
</div>
</div>

</div>

<style>
    
    .review-response {
        overflow: hidden;
    }

    .open .review-response {
        max-height: none;
    }

     @media (max-width: 767px) {
         .public-messages {
             border-top: none !important;
             margin-left: 0 !important;
             margin-top: 5px !important;
             padding-top: 0 !important;
         }

         .review-hide {
             display: none !important;
         }

         .open .review-hide{
             display: block !important;
         }
     }
</style>

<div class="review-entry col-xs-12 text-left pad-none pad-top-lg  border-bottom-teal-lt">
<a name="r7745345"></a>
<div class="col-xs-12 col-sm-3 pad-left-none text-center review-date margin-bottom-md">
    <div class="italic col-xs-6 col-sm-12 pad-none margin-none font-20">January 04, 2021</div>
    <div class="col-xs-6 col-sm-12 pad-none dealership-rating">
        <div class="rating-static visible-xs pad-none margin-none rating-50 pull-right"></div>
        <div class="rating-static hidden-xs rating-50 margin-center"></div>
        <div class="col-xs-12 hidden-xs pad-none margin-top-sm small-text dr-grey">SALES VISIT - USED</div>
    </div>
</div>
<div class="col-xs-12 col-sm-9 pad-none review-wrapper">
<!-- REVIEW TITLE, USER-->
<div class="margin-bottom-sm line-height-150">
    <h3 class="no-format inline italic-bolder font-20 dark-grey">"Started my process online, then came into the dealership..."</h3>
    <span class="italic font-18 black notranslate">- Shayla C</span>
</div>

<!-- REVIEW BODY -->

<div class="tr margin-top-md">
        <div class="td text-left pad-right-lg pad-top-sm">
            <img class="margin-bottom-md pointer" id="lotshotPhoto_2012524" onclick="ShowLotshotImage(this);" src="https://cdn-user.dealerrater.com/images/lotshot/b684dda7-1dc8-439b-810f-6aeecc15804f-th.jpg" width="142px" />
        </div>
    <div class="td text-left valign-top ">
        <p class="font-16 review-content margin-bottom-none line-height-25">Started my process online, then came into the dealership to finish up everything and drove off in my new Malibu! We spent only a few hours at the dealership, but the people were so friendly it didn’t seem like that long. Shonna was AMAZING!!!!!! </p>
            <a id="7745345" class="read-more-toggle pointer line-height-25 small-text block margin-bottom-md">Read More</a>
    </div>
</div>

<!-- REVIEW RATINGS - ALL -->
<div class="pull-left pad-left-md pad-right-md bg-grey-lt margin-bottom-md review-ratings-all review-hide">
    <!-- REVIEW RATING - CUSTOMER SERVICE -->
    <div class="table width-100 pad-left-none pad-right-none margin-bottom-md">
        <div class="tr">
            <div class="lt-grey small-text td">Customer Service</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - QUALITY OF WORK -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Quality of Work</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - FRIENDLINESS -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Friendliness</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - PRICING -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Pricing</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - EXPERIENCE -->
        <div class="tr margin-bottom-md">
            <div class="td lt-grey small-text">Overall Experience</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - RECOMMEND DEALER -->
        <div class="tr">
            <div class="lt-grey small-text td">Recommend Dealer</div>
            <div class="td small-text boldest">
                Yes
            </div>
        </div>
    </div>


</div>

<!-- EMPLOYEE SECTION -->
<div class="clear-fix  margin-top-sm">
        <div class="col-xs-12 lt-grey pad-left-none employees-wrapper">
            <div class="small-text">Employees Worked With </div>

                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/ca22768af3f7.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal  margin-right-sm emp-640356" data-emp-id="640356" href="/sales/Taylor-Prickett-review-640356/">
                                             Taylor Prickett
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/f7039892a18c.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal  margin-right-sm emp-664900" data-emp-id="664900" href="/sales/Shonna-Stuve-review-664900/">
                                             Shonna Stuve
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/employee-placeholder.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal   emp-665485" data-emp-id="665485" href="/sales/Brook-Davis-review-665485/">
                                             Brook Davis
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">4.0</span>
            <div class="rating-static rating-40 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                    </div>
</div>

<!-- SOCIAL MEDIA AND REVIEW ACTIONS -->
<div class="col-xs-12 pad-none review-hide margin-top-lg">
    <div class="pull-left">
        <a href="https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7745345&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People" onclick="window.open('https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7745345&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Twitter"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_twitter_sm.png" /></a>
        <a href="http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7745345" onclick="window.open('http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7745345', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Facebook"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_facebook_sm.png" /></a>
    </div>
    <div class="pull-left margin-left-md">
        <a href="#" onclick="javascript:window.reportReview(7745345); return false;" class="small-text">Report</a> |
        <a href="#" onclick="window.open('/consumer/dealer/23685/review/7745345/print', 'report', 'toolbar=no,scrollbars=yes,location=no,width=720,height=400,resizable=yes'); return false;" class="small-text">Print</a>
    </div>
</div>

<!-- PUBLIC MESSAGES -->

<!-- WAS HELPFUL SECTION -->
<div class="col-xs-12 margin-bottom-lg">
    <div class="pull-right">
        <a href="#" class="helpful-button" onclick="javascript:MarkReviewHelpful(7745345, this); return false;">
            <img class="pull-left margin-right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup.png" /> Helpful <span class="helpful-count display-none" id="helpful_count_7745345">0</span></a>
    </div>
</div>
</div>

</div>

<style>
    
    .review-response {
        overflow: hidden;
    }

    .open .review-response {
        max-height: none;
    }

     @media (max-width: 767px) {
         .public-messages {
             border-top: none !important;
             margin-left: 0 !important;
             margin-top: 5px !important;
             padding-top: 0 !important;
         }

         .review-hide {
             display: none !important;
         }

         .open .review-hide{
             display: block !important;
         }
     }
</style>

<div class="review-entry col-xs-12 text-left pad-none pad-top-lg  border-bottom-teal-lt">
<a name="r7710210"></a>
<div class="col-xs-12 col-sm-3 pad-left-none text-center review-date margin-bottom-md">
    <div class="italic col-xs-6 col-sm-12 pad-none margin-none font-20">December 22, 2020</div>
    <div class="col-xs-6 col-sm-12 pad-none dealership-rating">
        <div class="rating-static visible-xs pad-none margin-none rating-50 pull-right"></div>
        <div class="rating-static hidden-xs rating-50 margin-center"></div>
        <div class="col-xs-12 hidden-xs pad-none margin-top-sm small-text dr-grey">SALES VISIT - NEW</div>
    </div>
</div>
<div class="col-xs-12 col-sm-9 pad-none review-wrapper">
<!-- REVIEW TITLE, USER-->
<div class="margin-bottom-sm line-height-150">
    <h3 class="no-format inline italic-bolder font-20 dark-grey">"Both David and Brandon exceeded my expectations when it..."</h3>
    <span class="italic font-18 black notranslate">- Kelsey Laird</span>
</div>

<!-- REVIEW BODY -->

<div class="tr margin-top-md">
    <div class="td text-left valign-top ">
        <p class="font-16 review-content margin-bottom-none line-height-25">Both David and Brandon exceeded my expectations when it came to a car buying experience. Will be back for sure in the future when we are ready to move forward with purchasing. </p>
            <a id="7710210" class="read-more-toggle pointer line-height-25 small-text block margin-bottom-md">Read More</a>
    </div>
</div>

<!-- REVIEW RATINGS - ALL -->
<div class="pull-left pad-left-md pad-right-md bg-grey-lt margin-bottom-md review-ratings-all review-hide">
    <!-- REVIEW RATING - CUSTOMER SERVICE -->
    <div class="table width-100 pad-left-none pad-right-none margin-bottom-md">
        <div class="tr">
            <div class="lt-grey small-text td">Customer Service</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - QUALITY OF WORK -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Quality of Work</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - FRIENDLINESS -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Friendliness</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - PRICING -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Pricing</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - EXPERIENCE -->
        <div class="tr margin-bottom-md">
            <div class="td lt-grey small-text">Overall Experience</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - RECOMMEND DEALER -->
        <div class="tr">
            <div class="lt-grey small-text td">Recommend Dealer</div>
            <div class="td small-text boldest">
                Yes
            </div>
        </div>
    </div>


</div>

<!-- EMPLOYEE SECTION -->
<div class="clear-fix  margin-top-sm">
        <div class="col-xs-12 lt-grey pad-left-none employees-wrapper">
            <div class="small-text">Employees Worked With </div>

                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/fe251d85b24f.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal  margin-right-sm emp-622292" data-emp-id="622292" href="/sales/David-Varner-review-622292/">
                                             David Varner
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/338f32ce6a76.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal   emp-507107" data-emp-id="507107" href="/sales/Brandon-McCloskey-review-507107/">
                                             Brandon McCloskey
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                    </div>
</div>

<!-- SOCIAL MEDIA AND REVIEW ACTIONS -->
<div class="col-xs-12 pad-none review-hide margin-top-lg">
    <div class="pull-left">
        <a href="https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7710210&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People" onclick="window.open('https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7710210&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Twitter"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_twitter_sm.png" /></a>
        <a href="http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7710210" onclick="window.open('http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7710210', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Facebook"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_facebook_sm.png" /></a>
    </div>
    <div class="pull-left margin-left-md">
        <a href="#" onclick="javascript:window.reportReview(7710210); return false;" class="small-text">Report</a> |
        <a href="#" onclick="window.open('/consumer/dealer/23685/review/7710210/print', 'report', 'toolbar=no,scrollbars=yes,location=no,width=720,height=400,resizable=yes'); return false;" class="small-text">Print</a>
    </div>
</div>

<!-- PUBLIC MESSAGES -->

<!-- WAS HELPFUL SECTION -->
<div class="col-xs-12 margin-bottom-lg">
    <div class="pull-right">
        <a href="#" class="helpful-button" onclick="javascript:MarkReviewHelpful(7710210, this); return false;">
            <img class="pull-left margin-right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup.png" /> Helpful <span class="helpful-count display-none" id="helpful_count_7710210">0</span></a>
    </div>
</div>
</div>

</div>

<style>
    
    .review-response {
        overflow: hidden;
    }

    .open .review-response {
        max-height: none;
    }

     @media (max-width: 767px) {
         .public-messages {
             border-top: none !important;
             margin-left: 0 !important;
             margin-top: 5px !important;
             padding-top: 0 !important;
         }

         .review-hide {
             display: none !important;
         }

         .open .review-hide{
             display: block !important;
         }
     }
</style>

<div class="review-entry col-xs-12 text-left pad-none pad-top-lg  border-bottom-teal-lt">
<a name="r7679236"></a>
<div class="col-xs-12 col-sm-3 pad-left-none text-center review-date margin-bottom-md">
    <div class="italic col-xs-6 col-sm-12 pad-none margin-none font-20">December 19, 2020</div>
    <div class="col-xs-6 col-sm-12 pad-none dealership-rating">
        <div class="rating-static visible-xs pad-none margin-none rating-50 pull-right"></div>
        <div class="rating-static hidden-xs rating-50 margin-center"></div>
        <div class="col-xs-12 hidden-xs pad-none margin-top-sm small-text dr-grey">SALES VISIT - NEW</div>
    </div>
</div>
<div class="col-xs-12 col-sm-9 pad-none review-wrapper">
<!-- REVIEW TITLE, USER-->
<div class="margin-bottom-sm line-height-150">
    <h3 class="no-format inline italic-bolder font-20 dark-grey">"David VarnerI Purchased a 2020 Equinox.. David went..."</h3>
    <span class="italic font-18 black notranslate">- Darrelldewyane2</span>
</div>

<!-- REVIEW BODY -->

<div class="tr margin-top-md">
    <div class="td text-left valign-top ">
        <p class="font-16 review-content margin-bottom-none line-height-25">David Varner
I Purchased a 2020 Equinox.. David went above and beyond to get the car I wanted.. 
He did not stop till I was happy... 
So.. When you need a car with great service buy it from David.. 
Only at McKaig Cheverolet</p>
            <a id="7679236" class="read-more-toggle pointer line-height-25 small-text block margin-bottom-md">Read More</a>
    </div>
</div>

<!-- REVIEW RATINGS - ALL -->
<div class="pull-left pad-left-md pad-right-md bg-grey-lt margin-bottom-md review-ratings-all review-hide">
    <!-- REVIEW RATING - CUSTOMER SERVICE -->
    <div class="table width-100 pad-left-none pad-right-none margin-bottom-md">
        <div class="tr">
            <div class="lt-grey small-text td">Customer Service</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - QUALITY OF WORK -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Quality of Work</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - FRIENDLINESS -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Friendliness</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - PRICING -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Pricing</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - EXPERIENCE -->
        <div class="tr margin-bottom-md">
            <div class="td lt-grey small-text">Overall Experience</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - RECOMMEND DEALER -->
        <div class="tr">
            <div class="lt-grey small-text td">Recommend Dealer</div>
            <div class="td small-text boldest">
                Yes
            </div>
        </div>
    </div>


</div>

<!-- EMPLOYEE SECTION -->
<div class="clear-fix  margin-top-sm">
        <div class="col-xs-12 lt-grey pad-left-none employees-wrapper">
            <div class="small-text">Employees Worked With </div>

                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/fe251d85b24f.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal  margin-right-sm emp-622292" data-emp-id="622292" href="/sales/David-Varner-review-622292/">
                                             David Varner
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/338f32ce6a76.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal   emp-507107" data-emp-id="507107" href="/sales/Brandon-McCloskey-review-507107/">
                                             Brandon McCloskey
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                    </div>
</div>

<!-- SOCIAL MEDIA AND REVIEW ACTIONS -->
<div class="col-xs-12 pad-none review-hide margin-top-lg">
    <div class="pull-left">
        <a href="https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7679236&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People" onclick="window.open('https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7679236&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Twitter"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_twitter_sm.png" /></a>
        <a href="http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7679236" onclick="window.open('http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7679236', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Facebook"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_facebook_sm.png" /></a>
    </div>
    <div class="pull-left margin-left-md">
        <a href="#" onclick="javascript:window.reportReview(7679236); return false;" class="small-text">Report</a> |
        <a href="#" onclick="window.open('/consumer/dealer/23685/review/7679236/print', 'report', 'toolbar=no,scrollbars=yes,location=no,width=720,height=400,resizable=yes'); return false;" class="small-text">Print</a>
    </div>
</div>

<!-- PUBLIC MESSAGES -->

<!-- WAS HELPFUL SECTION -->
<div class="col-xs-12 margin-bottom-lg">
    <div class="pull-right">
        <a href="#" class="helpful-button" onclick="javascript:MarkReviewHelpful(7679236, this); return false;">
            <img class="pull-left margin-right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup.png" /> Helpful <span class="helpful-count display-none" id="helpful_count_7679236">0</span></a>
    </div>
</div>
</div>

</div>

<style>
    
    .review-response {
        overflow: hidden;
    }

    .open .review-response {
        max-height: none;
    }

     @media (max-width: 767px) {
         .public-messages {
             border-top: none !important;
             margin-left: 0 !important;
             margin-top: 5px !important;
             padding-top: 0 !important;
         }

         .review-hide {
             display: none !important;
         }

         .open .review-hide{
             display: block !important;
         }
     }
</style>

<div class="review-entry col-xs-12 text-left pad-none pad-top-lg  border-bottom-teal-lt">
<a name="r7679234"></a>
<div class="col-xs-12 col-sm-3 pad-left-none text-center review-date margin-bottom-md">
    <div class="italic col-xs-6 col-sm-12 pad-none margin-none font-20">December 17, 2020</div>
    <div class="col-xs-6 col-sm-12 pad-none dealership-rating">
        <div class="rating-static visible-xs pad-none margin-none rating-50 pull-right"></div>
        <div class="rating-static hidden-xs rating-50 margin-center"></div>
        <div class="col-xs-12 hidden-xs pad-none margin-top-sm small-text dr-grey">SALES VISIT - NEW</div>
    </div>
</div>
<div class="col-xs-12 col-sm-9 pad-none review-wrapper">
<!-- REVIEW TITLE, USER-->
<div class="margin-bottom-sm line-height-150">
    <h3 class="no-format inline italic-bolder font-20 dark-grey">"David Varner really worker hard over a couple of days to..."</h3>
    <span class="italic font-18 black notranslate">- Stephanie.veaseyste </span>
</div>

<!-- REVIEW BODY -->

<div class="tr margin-top-md">
    <div class="td text-left valign-top ">
        <p class="font-16 review-content margin-bottom-none line-height-25">David Varner really worker hard over a couple of days to help my future husband get a brand new Chevy equinox thank you so much David </p>
            <a id="7679234" class="read-more-toggle pointer line-height-25 small-text block margin-bottom-md">Read More</a>
    </div>
</div>

<!-- REVIEW RATINGS - ALL -->
<div class="pull-left pad-left-md pad-right-md bg-grey-lt margin-bottom-md review-ratings-all review-hide">
    <!-- REVIEW RATING - CUSTOMER SERVICE -->
    <div class="table width-100 pad-left-none pad-right-none margin-bottom-md">
        <div class="tr">
            <div class="lt-grey small-text td">Customer Service</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - QUALITY OF WORK -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Quality of Work</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - FRIENDLINESS -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Friendliness</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - PRICING -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Pricing</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - EXPERIENCE -->
        <div class="tr margin-bottom-md">
            <div class="td lt-grey small-text">Overall Experience</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - RECOMMEND DEALER -->
        <div class="tr">
            <div class="lt-grey small-text td">Recommend Dealer</div>
            <div class="td small-text boldest">
                Yes
            </div>
        </div>
    </div>


</div>

<!-- EMPLOYEE SECTION -->
<div class="clear-fix  margin-top-sm">
        <div class="col-xs-12 lt-grey pad-left-none employees-wrapper">
            <div class="small-text">Employees Worked With </div>

                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/fcea1d8f0d9d.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal  margin-right-sm emp-479220" data-emp-id="479220" href="/sales/Freddie-Tomlinson-review-479220/">
                                             Freddie Tomlinson
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/fe251d85b24f.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal  margin-right-sm emp-622292" data-emp-id="622292" href="/sales/David-Varner-review-622292/">
                                             David Varner
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/338f32ce6a76.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal   emp-507107" data-emp-id="507107" href="/sales/Brandon-McCloskey-review-507107/">
                                             Brandon McCloskey
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                    </div>
</div>

<!-- SOCIAL MEDIA AND REVIEW ACTIONS -->
<div class="col-xs-12 pad-none review-hide margin-top-lg">
    <div class="pull-left">
        <a href="https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7679234&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People" onclick="window.open('https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7679234&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Twitter"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_twitter_sm.png" /></a>
        <a href="http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7679234" onclick="window.open('http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7679234', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Facebook"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_facebook_sm.png" /></a>
    </div>
    <div class="pull-left margin-left-md">
        <a href="#" onclick="javascript:window.reportReview(7679234); return false;" class="small-text">Report</a> |
        <a href="#" onclick="window.open('/consumer/dealer/23685/review/7679234/print', 'report', 'toolbar=no,scrollbars=yes,location=no,width=720,height=400,resizable=yes'); return false;" class="small-text">Print</a>
    </div>
</div>

<!-- PUBLIC MESSAGES -->

<!-- WAS HELPFUL SECTION -->
<div class="col-xs-12 margin-bottom-lg">
    <div class="pull-right">
        <a href="#" class="helpful-button" onclick="javascript:MarkReviewHelpful(7679234, this); return false;">
            <img class="pull-left margin-right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup.png" /> Helpful <span class="helpful-count display-none" id="helpful_count_7679234">0</span></a>
    </div>
</div>
</div>

</div>

<style>
    
    .review-response {
        overflow: hidden;
    }

    .open .review-response {
        max-height: none;
    }

     @media (max-width: 767px) {
         .public-messages {
             border-top: none !important;
             margin-left: 0 !important;
             margin-top: 5px !important;
             padding-top: 0 !important;
         }

         .review-hide {
             display: none !important;
         }

         .open .review-hide{
             display: block !important;
         }
     }
</style>

<div class="review-entry col-xs-12 text-left pad-none pad-top-lg  border-bottom-teal-lt">
<a name="r7691660"></a>
<div class="col-xs-12 col-sm-3 pad-left-none text-center review-date margin-bottom-md">
    <div class="italic col-xs-6 col-sm-12 pad-none margin-none font-20">December 16, 2020</div>
    <div class="col-xs-6 col-sm-12 pad-none dealership-rating">
        <div class="rating-static visible-xs pad-none margin-none rating-50 pull-right"></div>
        <div class="rating-static hidden-xs rating-50 margin-center"></div>
        <div class="col-xs-12 hidden-xs pad-none margin-top-sm small-text dr-grey">SERVICE VISIT</div>
    </div>
</div>
<div class="col-xs-12 col-sm-9 pad-none review-wrapper">
<!-- REVIEW TITLE, USER-->
<div class="margin-bottom-sm line-height-150">
    <h3 class="no-format inline italic-bolder font-20 dark-grey">"I’m Lou Ann Wise and I drove from Marshall, TX. Patrick..."</h3>
    <span class="italic font-18 black notranslate">- louann326</span>
</div>

<!-- REVIEW BODY -->

<div class="tr margin-top-md">
    <div class="td text-left valign-top ">
        <p class="font-16 review-content margin-bottom-none line-height-25">I’m Lou Ann Wise and I drove from Marshall, TX. Patrick was very friendly and courteous. I was in and out in no time at all.</p>
            <a id="7691660" class="read-more-toggle pointer line-height-25 small-text block margin-bottom-md">Read More</a>
    </div>
</div>

<!-- REVIEW RATINGS - ALL -->
<div class="pull-left pad-left-md pad-right-md bg-grey-lt margin-bottom-md review-ratings-all review-hide">
    <!-- REVIEW RATING - CUSTOMER SERVICE -->
    <div class="table width-100 pad-left-none pad-right-none margin-bottom-md">
        <div class="tr">
            <div class="lt-grey small-text td">Customer Service</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - QUALITY OF WORK -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Quality of Work</div>
            <div class="rating-static-indv rating-00 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - FRIENDLINESS -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Friendliness</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - PRICING -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Pricing</div>
            <div class="rating-static-indv rating-00 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - EXPERIENCE -->
        <div class="tr margin-bottom-md">
            <div class="td lt-grey small-text">Overall Experience</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - RECOMMEND DEALER -->
        <div class="tr">
            <div class="lt-grey small-text td">Recommend Dealer</div>
            <div class="td small-text boldest">
                Yes
            </div>
        </div>
    </div>


</div>

<!-- EMPLOYEE SECTION -->
<div class="clear-fix  margin-top-sm">
        <div class="col-xs-12 lt-grey pad-left-none employees-wrapper">
            <div class="small-text">Employees Worked With </div>

                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/b5f1378d2169.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal   emp-631679" data-emp-id="631679" href="/sales/Patrick-Evans-review-631679/">
                                             Patrick Evans
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                    </div>
</div>

<!-- SOCIAL MEDIA AND REVIEW ACTIONS -->
<div class="col-xs-12 pad-none review-hide margin-top-lg">
    <div class="pull-left">
        <a href="https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7691660&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People" onclick="window.open('https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7691660&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Twitter"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_twitter_sm.png" /></a>
        <a href="http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7691660" onclick="window.open('http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7691660', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Facebook"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_facebook_sm.png" /></a>
    </div>
    <div class="pull-left margin-left-md">
        <a href="#" onclick="javascript:window.reportReview(7691660); return false;" class="small-text">Report</a> |
        <a href="#" onclick="window.open('/consumer/dealer/23685/review/7691660/print', 'report', 'toolbar=no,scrollbars=yes,location=no,width=720,height=400,resizable=yes'); return false;" class="small-text">Print</a>
    </div>
</div>

<!-- PUBLIC MESSAGES -->

<!-- WAS HELPFUL SECTION -->
<div class="col-xs-12 margin-bottom-lg">
    <div class="pull-right">
        <a href="#" class="helpful-button" onclick="javascript:MarkReviewHelpful(7691660, this); return false;">
            <img class="pull-left margin-right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup.png" /> Helpful <span class="helpful-count display-none" id="helpful_count_7691660">0</span></a>
    </div>
</div>
</div>

</div>

<style>
    
    .review-response {
        overflow: hidden;
    }

    .open .review-response {
        max-height: none;
    }

     @media (max-width: 767px) {
         .public-messages {
             border-top: none !important;
             margin-left: 0 !important;
             margin-top: 5px !important;
             padding-top: 0 !important;
         }

         .review-hide {
             display: none !important;
         }

         .open .review-hide{
             display: block !important;
         }
     }
</style>

<div class="review-entry col-xs-12 text-left pad-none pad-top-lg  border-bottom-teal-lt">
<a name="r7684701"></a>
<div class="col-xs-12 col-sm-3 pad-left-none text-center review-date margin-bottom-md">
    <div class="italic col-xs-6 col-sm-12 pad-none margin-none font-20">December 15, 2020</div>
    <div class="col-xs-6 col-sm-12 pad-none dealership-rating">
        <div class="rating-static visible-xs pad-none margin-none rating-50 pull-right"></div>
        <div class="rating-static hidden-xs rating-50 margin-center"></div>
        <div class="col-xs-12 hidden-xs pad-none margin-top-sm small-text dr-grey">SALES VISIT - USED</div>
    </div>
</div>
<div class="col-xs-12 col-sm-9 pad-none review-wrapper">
<!-- REVIEW TITLE, USER-->
<div class="margin-bottom-sm line-height-150">
    <h3 class="no-format inline italic-bolder font-20 dark-grey">"Fast and friendly service, Dennis was very helpful and..."</h3>
    <span class="italic font-18 black notranslate">- renee9173</span>
</div>

<!-- REVIEW BODY -->

<div class="tr margin-top-md">
    <div class="td text-left valign-top ">
        <p class="font-16 review-content margin-bottom-none line-height-25">Fast and friendly service, Dennis was very helpful and explained everything about the car that I needed to know. Would highly recommend McKaig Chev Buick to friends and family.
Renee M</p>
            <a id="7684701" class="read-more-toggle pointer line-height-25 small-text block margin-bottom-md">Read More</a>
    </div>
</div>

<!-- REVIEW RATINGS - ALL -->
<div class="pull-left pad-left-md pad-right-md bg-grey-lt margin-bottom-md review-ratings-all review-hide">
    <!-- REVIEW RATING - CUSTOMER SERVICE -->
    <div class="table width-100 pad-left-none pad-right-none margin-bottom-md">
        <div class="tr">
            <div class="lt-grey small-text td">Customer Service</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - QUALITY OF WORK -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Quality of Work</div>
            <div class="rating-static-indv rating-00 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - FRIENDLINESS -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Friendliness</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - PRICING -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Pricing</div>
            <div class="rating-static-indv rating-00 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - EXPERIENCE -->
        <div class="tr margin-bottom-md">
            <div class="td lt-grey small-text">Overall Experience</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - RECOMMEND DEALER -->
        <div class="tr">
            <div class="lt-grey small-text td">Recommend Dealer</div>
            <div class="td small-text boldest">
                Yes
            </div>
        </div>
    </div>


</div>

<!-- EMPLOYEE SECTION -->
<div class="clear-fix  margin-top-sm">
        <div class="col-xs-12 lt-grey pad-left-none employees-wrapper">
            <div class="small-text">Employees Worked With </div>

                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/ca22768af3f7.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal  margin-right-sm emp-640356" data-emp-id="640356" href="/sales/Taylor-Prickett-review-640356/">
                                             Taylor Prickett
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/307448fc2105.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal   emp-507162" data-emp-id="507162" href="/sales/Dennis-Smith-review-507162/">
                                             Dennis Smith
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                    </div>
</div>

<!-- SOCIAL MEDIA AND REVIEW ACTIONS -->
<div class="col-xs-12 pad-none review-hide margin-top-lg">
    <div class="pull-left">
        <a href="https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7684701&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People" onclick="window.open('https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7684701&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Twitter"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_twitter_sm.png" /></a>
        <a href="http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7684701" onclick="window.open('http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7684701', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Facebook"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_facebook_sm.png" /></a>
    </div>
    <div class="pull-left margin-left-md">
        <a href="#" onclick="javascript:window.reportReview(7684701); return false;" class="small-text">Report</a> |
        <a href="#" onclick="window.open('/consumer/dealer/23685/review/7684701/print', 'report', 'toolbar=no,scrollbars=yes,location=no,width=720,height=400,resizable=yes'); return false;" class="small-text">Print</a>
    </div>
</div>

<!-- PUBLIC MESSAGES -->

<!-- WAS HELPFUL SECTION -->
<div class="col-xs-12 margin-bottom-lg">
    <div class="pull-right">
        <a href="#" class="helpful-button" onclick="javascript:MarkReviewHelpful(7684701, this); return false;">
            <img class="pull-left margin-right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup.png" /> Helpful <span class="helpful-count display-none" id="helpful_count_7684701">0</span></a>
    </div>
</div>
</div>

</div>

<style>
    
    .review-response {
        overflow: hidden;
    }

    .open .review-response {
        max-height: none;
    }

     @media (max-width: 767px) {
         .public-messages {
             border-top: none !important;
             margin-left: 0 !important;
             margin-top: 5px !important;
             padding-top: 0 !important;
         }

         .review-hide {
             display: none !important;
         }

         .open .review-hide{
             display: block !important;
         }
     }
</style>

<div class="review-entry col-xs-12 text-left pad-none pad-top-lg  border-bottom-teal-lt">
<a name="r7675849"></a>
<div class="col-xs-12 col-sm-3 pad-left-none text-center review-date margin-bottom-md">
    <div class="italic col-xs-6 col-sm-12 pad-none margin-none font-20">December 11, 2020</div>
    <div class="col-xs-6 col-sm-12 pad-none dealership-rating">
        <div class="rating-static visible-xs pad-none margin-none rating-42 pull-right"></div>
        <div class="rating-static hidden-xs rating-42 margin-center"></div>
        <div class="col-xs-12 hidden-xs pad-none margin-top-sm small-text dr-grey">SALES VISIT - USED</div>
    </div>
</div>
<div class="col-xs-12 col-sm-9 pad-none review-wrapper">
<!-- REVIEW TITLE, USER-->
<div class="margin-bottom-sm line-height-150">
    <h3 class="no-format inline italic-bolder font-20 dark-grey">"We came from Gilmer looking for a newer vehicle. The 1st..."</h3>
    <span class="italic font-18 black notranslate">- jlclem61</span>
</div>

<!-- REVIEW BODY -->

<div class="tr margin-top-md">
    <div class="td text-left valign-top ">
        <p class="font-16 review-content margin-bottom-none line-height-25">We came from Gilmer looking for a newer vehicle. The 1st time we Adrian he stayed late for us to look at cars. He’s very professional. When we decided to buy a car I called Adrian and he was helpful in getting the vehicle that we wanted.</p>
            <a id="7675849" class="read-more-toggle pointer line-height-25 small-text block margin-bottom-md">Read More</a>
    </div>
</div>

<!-- REVIEW RATINGS - ALL -->
<div class="pull-left pad-left-md pad-right-md bg-grey-lt margin-bottom-md review-ratings-all review-hide">
    <!-- REVIEW RATING - CUSTOMER SERVICE -->
    <div class="table width-100 pad-left-none pad-right-none margin-bottom-md">
        <div class="tr">
            <div class="lt-grey small-text td">Customer Service</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - QUALITY OF WORK -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Quality of Work</div>
            <div class="rating-static-indv rating-40 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - FRIENDLINESS -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Friendliness</div>
            <div class="rating-static-indv rating-40 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - PRICING -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Pricing</div>
            <div class="rating-static-indv rating-40 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - EXPERIENCE -->
        <div class="tr margin-bottom-md">
            <div class="td lt-grey small-text">Overall Experience</div>
            <div class="rating-static-indv rating-40 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - RECOMMEND DEALER -->
        <div class="tr">
            <div class="lt-grey small-text td">Recommend Dealer</div>
            <div class="td small-text boldest">
                Yes
            </div>
        </div>
    </div>


</div>

<!-- EMPLOYEE SECTION -->
<div class="clear-fix  margin-top-sm">
        <div class="col-xs-12 lt-grey pad-left-none employees-wrapper">
            <div class="small-text">Employees Worked With </div>

                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/f00ae268a4b8.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal   emp-273456" data-emp-id="273456" href="/sales/Adrian-AyyDee-Cortes-review-273456/">
                                             Adrian "AyyDee" Cortes
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                    </div>
</div>

<!-- SOCIAL MEDIA AND REVIEW ACTIONS -->
<div class="col-xs-12 pad-none review-hide margin-top-lg">
    <div class="pull-left">
        <a href="https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7675849&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People" onclick="window.open('https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7675849&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Twitter"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_twitter_sm.png" /></a>
        <a href="http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7675849" onclick="window.open('http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7675849', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Facebook"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_facebook_sm.png" /></a>
    </div>
    <div class="pull-left margin-left-md">
        <a href="#" onclick="javascript:window.reportReview(7675849); return false;" class="small-text">Report</a> |
        <a href="#" onclick="window.open('/consumer/dealer/23685/review/7675849/print', 'report', 'toolbar=no,scrollbars=yes,location=no,width=720,height=400,resizable=yes'); return false;" class="small-text">Print</a>
    </div>
</div>

<!-- PUBLIC MESSAGES -->

<!-- WAS HELPFUL SECTION -->
<div class="col-xs-12 margin-bottom-lg">
    <div class="pull-right">
        <a href="#" class="helpful-button" onclick="javascript:MarkReviewHelpful(7675849, this); return false;">
            <img class="pull-left margin-right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup.png" /> Helpful <span class="helpful-count display-none" id="helpful_count_7675849">0</span></a>
    </div>
</div>
</div>

</div>

<style>
    
    .review-response {
        overflow: hidden;
    }

    .open .review-response {
        max-height: none;
    }

     @media (max-width: 767px) {
         .public-messages {
             border-top: none !important;
             margin-left: 0 !important;
             margin-top: 5px !important;
             padding-top: 0 !important;
         }

         .review-hide {
             display: none !important;
         }

         .open .review-hide{
             display: block !important;
         }
     }
</style>

<div class="review-entry col-xs-12 text-left pad-none pad-top-lg  border-bottom-teal-lt">
<a name="r7675652"></a>
<div class="col-xs-12 col-sm-3 pad-left-none text-center review-date margin-bottom-md">
    <div class="italic col-xs-6 col-sm-12 pad-none margin-none font-20">December 11, 2020</div>
    <div class="col-xs-6 col-sm-12 pad-none dealership-rating">
        <div class="rating-static visible-xs pad-none margin-none rating-50 pull-right"></div>
        <div class="rating-static hidden-xs rating-50 margin-center"></div>
        <div class="col-xs-12 hidden-xs pad-none margin-top-sm small-text dr-grey">SALES VISIT - USED</div>
    </div>
</div>
<div class="col-xs-12 col-sm-9 pad-none review-wrapper">
<!-- REVIEW TITLE, USER-->
<div class="margin-bottom-sm line-height-150">
    <h3 class="no-format inline italic-bolder font-20 dark-grey">"Came out from Lindale after being referred to the..."</h3>
    <span class="italic font-18 black notranslate">- Arpfire36</span>
</div>

<!-- REVIEW BODY -->

<div class="tr margin-top-md">
    <div class="td text-left valign-top ">
        <p class="font-16 review-content margin-bottom-none line-height-25">Came out from Lindale after being referred to the dealership, met Adrian after I showed up to my appointment. He did everything in his power to find a deal that would work for me; he was extremely knowledgeable in all areas of his job duties and helped me get into a car that I desired.</p>
            <a id="7675652" class="read-more-toggle pointer line-height-25 small-text block margin-bottom-md">Read More</a>
    </div>
</div>

<!-- REVIEW RATINGS - ALL -->
<div class="pull-left pad-left-md pad-right-md bg-grey-lt margin-bottom-md review-ratings-all review-hide">
    <!-- REVIEW RATING - CUSTOMER SERVICE -->
    <div class="table width-100 pad-left-none pad-right-none margin-bottom-md">
        <div class="tr">
            <div class="lt-grey small-text td">Customer Service</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - QUALITY OF WORK -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Quality of Work</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - FRIENDLINESS -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Friendliness</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - PRICING -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Pricing</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - EXPERIENCE -->
        <div class="tr margin-bottom-md">
            <div class="td lt-grey small-text">Overall Experience</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - RECOMMEND DEALER -->
        <div class="tr">
            <div class="lt-grey small-text td">Recommend Dealer</div>
            <div class="td small-text boldest">
                Yes
            </div>
        </div>
    </div>


</div>

<!-- EMPLOYEE SECTION -->
<div class="clear-fix  margin-top-sm">
        <div class="col-xs-12 lt-grey pad-left-none employees-wrapper">
            <div class="small-text">Employees Worked With </div>

                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/f00ae268a4b8.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal   emp-273456" data-emp-id="273456" href="/sales/Adrian-AyyDee-Cortes-review-273456/">
                                             Adrian "AyyDee" Cortes
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                    </div>
</div>

<!-- SOCIAL MEDIA AND REVIEW ACTIONS -->
<div class="col-xs-12 pad-none review-hide margin-top-lg">
    <div class="pull-left">
        <a href="https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7675652&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People" onclick="window.open('https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7675652&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Twitter"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_twitter_sm.png" /></a>
        <a href="http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7675652" onclick="window.open('http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7675652', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Facebook"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_facebook_sm.png" /></a>
    </div>
    <div class="pull-left margin-left-md">
        <a href="#" onclick="javascript:window.reportReview(7675652); return false;" class="small-text">Report</a> |
        <a href="#" onclick="window.open('/consumer/dealer/23685/review/7675652/print', 'report', 'toolbar=no,scrollbars=yes,location=no,width=720,height=400,resizable=yes'); return false;" class="small-text">Print</a>
    </div>
</div>

<!-- PUBLIC MESSAGES -->

<!-- WAS HELPFUL SECTION -->
<div class="col-xs-12 margin-bottom-lg">
    <div class="pull-right">
        <a href="#" class="helpful-button" onclick="javascript:MarkReviewHelpful(7675652, this); return false;">
            <img class="pull-left margin-right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup.png" /> Helpful <span class="helpful-count display-none" id="helpful_count_7675652">0</span></a>
    </div>
</div>
</div>

</div>

<style>
    
    .review-response {
        overflow: hidden;
    }

    .open .review-response {
        max-height: none;
    }

     @media (max-width: 767px) {
         .public-messages {
             border-top: none !important;
             margin-left: 0 !important;
             margin-top: 5px !important;
             padding-top: 0 !important;
         }

         .review-hide {
             display: none !important;
         }

         .open .review-hide{
             display: block !important;
         }
     }
</style>

<div class="review-entry col-xs-12 text-left pad-none pad-top-lg  border-bottom-teal-lt">
<a name="r7675551"></a>
<div class="col-xs-12 col-sm-3 pad-left-none text-center review-date margin-bottom-md">
    <div class="italic col-xs-6 col-sm-12 pad-none margin-none font-20">December 11, 2020</div>
    <div class="col-xs-6 col-sm-12 pad-none dealership-rating">
        <div class="rating-static visible-xs pad-none margin-none rating-50 pull-right"></div>
        <div class="rating-static hidden-xs rating-50 margin-center"></div>
        <div class="col-xs-12 hidden-xs pad-none margin-top-sm small-text dr-grey">SALES VISIT - NEW</div>
    </div>
</div>
<div class="col-xs-12 col-sm-9 pad-none review-wrapper">
<!-- REVIEW TITLE, USER-->
<div class="margin-bottom-sm line-height-150">
    <h3 class="no-format inline italic-bolder font-20 dark-grey">"Adrian was extremely helpful in selecting my new Buick...."</h3>
    <span class="italic font-18 black notranslate">- Katherinetisdale</span>
</div>

<!-- REVIEW BODY -->

<div class="tr margin-top-md">
    <div class="td text-left valign-top ">
        <p class="font-16 review-content margin-bottom-none line-height-25">Adrian was extremely helpful in selecting my new Buick. He was very courteous and understand with all of the question i had asked. For sure will come back for my next vehicle. </p>
            <a id="7675551" class="read-more-toggle pointer line-height-25 small-text block margin-bottom-md">Read More</a>
    </div>
</div>

<!-- REVIEW RATINGS - ALL -->
<div class="pull-left pad-left-md pad-right-md bg-grey-lt margin-bottom-md review-ratings-all review-hide">
    <!-- REVIEW RATING - CUSTOMER SERVICE -->
    <div class="table width-100 pad-left-none pad-right-none margin-bottom-md">
        <div class="tr">
            <div class="lt-grey small-text td">Customer Service</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - QUALITY OF WORK -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Quality of Work</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - FRIENDLINESS -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Friendliness</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - PRICING -->
        <div class="tr margin-bottom-md">
            <div class="lt-grey small-text td">Pricing</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - EXPERIENCE -->
        <div class="tr margin-bottom-md">
            <div class="td lt-grey small-text">Overall Experience</div>
            <div class="rating-static-indv rating-50 margin-top-none td"></div>
        </div>

        <!-- REVIEW RATING - RECOMMEND DEALER -->
        <div class="tr">
            <div class="lt-grey small-text td">Recommend Dealer</div>
            <div class="td small-text boldest">
                Yes
            </div>
        </div>
    </div>


</div>

<!-- EMPLOYEE SECTION -->
<div class="clear-fix  margin-top-sm">
        <div class="col-xs-12 lt-grey pad-left-none employees-wrapper">
            <div class="small-text">Employees Worked With </div>

                         <div class="col-xs-12 col-sm-6 col-md-4 pad-left-none pad-top-sm pad-bottom-sm review-employee">
                             <div class="table">
                                 <div class="td square-image employee-image" style="background-image: url(https://cdn-user.dealerrater.com/images/dealer/23685/employees/f00ae268a4b8.jpg)"></div>
                                 
                                 <div class="td valign-bottom pad-left-md pad-top-none pad-bottom-none">
                                         <a class="notranslate pull-left line-height-1 tagged-emp small-text teal   emp-273456" data-emp-id="273456" href="/sales/Adrian-AyyDee-Cortes-review-273456/">
                                             Adrian "AyyDee" Cortes
                                         </a>
                                                                              <div class="col-xs-12 pad-none margin-none pad-top-sm">


<div class="relative employee-rating-badge-sm">
    <div class="col-xs-12 pad-none">
            <span class="pull-left font-14 boldest lt-grey line-height-1 pad-right-sm margin-right-sm border-right">5.0</span>
            <div class="rating-static rating-50 margin-top-none pull-left"></div>
    </div>
    
</div>

                                         </div>
                                 </div>

                             </div>

                         </div>
                    </div>
</div>

<!-- SOCIAL MEDIA AND REVIEW ACTIONS -->
<div class="col-xs-12 pad-none review-hide margin-top-lg">
    <div class="pull-left">
        <a href="https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7675551&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People" onclick="window.open('https://twitter.com/intent/tweet?url=http://www.dealerrater.com/consumer/social/7675551&amp;via=dealerrater&amp;text=Check+out+the+latest+review+on+McKaig+Chevrolet+Buick+-+A+Dealer+For+The+People', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Twitter"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_twitter_sm.png" /></a>
        <a href="http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7675551" onclick="window.open('http://www.facebook.com/share.php?u=http://www.dealerrater.com/consumer/social/7675551', 'sharer', 'toolbar=0,status=0,width=750,height=500');return false;" target="_blank" rel="nofollow" title="Facebook"><img class="align-bottom" height="20" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_facebook_sm.png" /></a>
    </div>
    <div class="pull-left margin-left-md">
        <a href="#" onclick="javascript:window.reportReview(7675551); return false;" class="small-text">Report</a> |
        <a href="#" onclick="window.open('/consumer/dealer/23685/review/7675551/print', 'report', 'toolbar=no,scrollbars=yes,location=no,width=720,height=400,resizable=yes'); return false;" class="small-text">Print</a>
    </div>
</div>

<!-- PUBLIC MESSAGES -->

<!-- WAS HELPFUL SECTION -->
<div class="col-xs-12 margin-bottom-lg">
    <div class="pull-right">
        <a href="#" class="helpful-button" onclick="javascript:MarkReviewHelpful(7675551, this); return false;">
            <img class="pull-left margin-right-sm" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup.png" /> Helpful <span class="helpful-count display-none" id="helpful_count_7675551">0</span></a>
    </div>
</div>
</div>

</div>

<style>
    
    .review-response {
        overflow: hidden;
    }

    .open .review-response {
        max-height: none;
    }

     @media (max-width: 767px) {
         .public-messages {
             border-top: none !important;
             margin-left: 0 !important;
             margin-top: 5px !important;
             padding-top: 0 !important;
         }

         .review-hide {
             display: none !important;
         }

         .open .review-hide{
             display: block !important;
         }
     }
</style>                </div>

            </div>
        </div>
            <div class="col-xs-12 pad-none text-center pager-section pad-left-md pad-right-md  pad-bottom-lg mobile-hide">
                <div class="sliding_pagination clearfix"><div class="page_container"><div class="page_inactive prev page">&lt;&nbsp;prev</div><div class="page_inactive page_current page">1</div><div class="page_active page_num_2 page" onclick="javascript:document.location.href=&#39;/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/page2/?filter=ONLY_POSITIVE#link&#39;;"><a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/page2/?filter=ONLY_POSITIVE#link" rel="page_num_2">2</a></div><div class="ellipsis">...</div><div class="page_active page_num_200 page" onclick="javascript:document.location.href=&#39;/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/page200/?filter=ONLY_POSITIVE#link&#39;;"><a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/page200/?filter=ONLY_POSITIVE#link" rel="page_num_200">200</a></div><div class="page_active next page_num_2 page" onclick="javascript:document.location.href=&#39;/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/page2/?filter=ONLY_POSITIVE#link&#39;;"><a href="/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/page2/?filter=ONLY_POSITIVE#link" rel="next page_num_2">next&nbsp;&gt;</a></div></div><div class="label">1 - 10 of 2,000 results</div></div>
            </div>
    </div>
</div>

<div id="dialog-report" class="dp-dialog-report" style="display: none" title="Report Review">
<form action="/json/reviews/report" id="report_form" method="post"><input data-val="true" data-val-number="The field ReviewId must be a number." data-val-required="Review is required." id="ReviewId" name="ReviewId" type="hidden" value="0" /><input data-val="true" data-val-required="Source is required." id="Source" name="Source" type="hidden" value="All" />      <p class="margin-top-md">
        <label>Reason for reporting the review: </label>
        <select data-val="true" data-val-required="Reason is required." id="Reason" name="Reason"><option value="">Select...</option>
<option value="2">Duplicate Review</option>
<option value="3">Former Employee</option>
<option value="4">Fraudulent Review</option>
<option value="5">Incorrect Dealer Page</option>
<option value="7">Inappropriate Content</option>
<option value="6">Other</option>
</select>
        <span class="field-validation-valid" data-valmsg-for="Reason" data-valmsg-replace="true"></span>
      </p>
      <label name="-" class="font-15 bold margin-top-lg margin-bottom-sm">
        Please state your concerns regarding this review.<br/>
        Please be as descriptive as possible.
      </label>
        <label name="_1" class="font-15 bold margin-top-lg margin-bottom-sm display:none">We ask that reviewers read your private response within 5 days. This is a measure put in place to help identify fraudulent posts on the site, and in some cases we may determine that the review is not subject to removal even when the reviewer has not read your response.</label>
        <label name="_2" class="font-15 bold margin-top-lg margin-bottom-sm display:none">Which review do you believe this to be a duplicate of? Please provide the screen name, date, etc.</label>
        <label name="_3" class="font-15 bold margin-top-lg margin-bottom-sm display:none">Please provide any identifying information that you have regarding the former employee that you believe wrote the review – full name, email, social media links, anything that will help us research a connection between the review and that person.</label>
        <label name="_4" class="font-15 bold margin-top-lg margin-bottom-sm display:none">Please let us know what leads you to believe that this review was posted fraudulently.</label>
        <label name="_5" class="font-15 bold margin-top-lg margin-bottom-sm display:none">Which dealership do you believe this review was meant for, and what leads you to believe the review was posted to the incorrect page?</label>
        <label name="_6" class="font-15 bold margin-top-lg margin-bottom-sm display:none">Please let us know what leads you to believe that this review should be removed from the page.</label>
        <label name="_7" class="font-15 bold margin-top-lg margin-bottom-sm display:none">Please provide the exact content of the review that you feel is inappropriate.</label>
<textarea class="width-100 pad-sm regular font-14" cols="20" data-val="true" data-val-length="The message can be no more than 2000 characters." data-val-length-max="2000" data-val-required="Message is required." id="report-message" name="Message" rows="">
</textarea><span class="field-validation-valid" data-valmsg-for="Message" data-valmsg-replace="true"></span>      <p class="margin-top-lg margin-top-none">
        <label>Your email address: </label>
        <input class="border-all-light" data-val="true" data-val-email="Please input a valid email address." data-val-required="Email is required" id="EmailAddress" name="EmailAddress" type="email" value="" /> 
        <div>
            <span class="field-validation-valid" data-valmsg-for="EmailAddress" data-valmsg-replace="true"></span>
        </div>
      </p>
      <a href="https://dealerrater.uservoice.com/knowledgebase/articles/916620-reasons-for-reporting-a-review" target="_blank" class="pull-left hidden-xs hidden-sm secondary-button orange line-height-150">Need some help <span class="glyphicon glyphicon-question-sign orange-lt font-18 valign-top"></span></a>
        <div class="ui-dialog-buttonset pull-right">
            <button onclick="closeReport();return false;" class="secondary-button orange pull-left margin-right-md">Cancel</button>
            <button onclick="submitReport(); return false;" class="submitReport primary-button orange pull-right">Submit</button>
        </div>
</form></div>
<div id="dialog_reportReview_in_progress" style="display: none" title="Please wait...">
    <p class="text-center pad-top-lg pad-left-lg pad-right-lg"><img height="64" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/loaders/spinner_32x32.gif" width="64" /></p>
</div>

<style>
    #dialog-report{
        width: 100% !important;
    }

    #dialog-report label[name^=_] {
      display: none;
    }

    .ui-dialog.report-dialog {
        border: none;
        -ms-border-radius: 2px;
        border-radius: 2px;
        background: #f3f3f3;
        padding: 0;
    }

    .ui-dialog.report-dialog .ui-dialog-titlebar {
        background: #25347B;
        color: #fff;
        -ms-border-radius: 0;
        border-radius: 0;
        font-size: 16px;
        font-family: MuseoSans-500 !important;
        padding: 8px 6px;
        height: 40px;
        vertical-align: top;
    }


   

    .ui-dialog.report-dialog .ui-widget-header .ui-icon-closethick {
        background: url(https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon_close_x_white.png) no-repeat;
        -ms-background-size: cover;
        background-size: cover;
    }

    .ui-dialog.report-dialog .ui-dialog-titlebar-close{
        top: 5px;
        right: 10px;
    }

    #report_form label{
        font-size: 15px;
        font-family: MuseoSans-500;
        font-weight: normal;
    }

     #report_form select, #report_form input{
         padding: 5px;
         font-size: 15px;
         font-family: MuseoSans-300;
         width: 250px;
         margin-left: 15px;
     }

     .ui-dialog.report-dialog .ui-dialog-buttonpane{
         border-top: none;
         margin-top: 0;
         padding-top: 0;
     }

    #dialog_reportReview_in_progress{
        width: 90% !important;
        height: 100% !important;
        padding-left: 5%;
        padding-right: 5%;
        top: -25px;
        padding-bottom: 0;
        margin: auto;
    }

     @media (max-width: 767px){
        .ui-dialog.report-dialog {
            width: 100% !important;
            left: 0;
            background: #fff;
            position: absolute !important;
            overflow-y: auto !important;
        }
        #report_form select, #report_form input{
            margin-left: 0;
        }

        #dialog_reportReview_in_progress{
            padding-top: 20px;
        }
     }
</style>
<div id="dialog_lotshot_popup" class="display-none">
    <a href="#" class="popup-close"></a>
    <div class="popup-content-wrapper">
        <img style="display: block; margin: 5px auto; max-width: 100%; max-height: 465px;" />
    </div>
</div>

<div id="mobile-lotshot" class="table fill-height text-center">
    <div class="td col-xs-12 bg-white border-all pad-none">
        <button class="bolder dark-grey font-14 bg-white pad-sm border-all uppercase pull-left margin-sm pointer" onclick="toggleLotShotPage()">
            &lt; BACK
        </button>
        <div id="mobile-lotshot-image" class="margin-top-sm pad-lg"></div>
    </div>
</div>
<style>
    .review-keyword {
        margin-right: 20px;
        margin-bottom: 15px;
        text-transform: uppercase;
        padding: 0 20px;
        line-height: 30px;
        display: block;
        float: left;
        height: 30px;
        font-size: 12px;
        font-family: MuseoSans-700;
        border-radius: 30px;
        letter-spacing: 1px;
        color: #fff;
        background-color: #a6a6a6;
    }
    .review-keyword.active {
        background-color: #05aec1;
    }
    .review-keywords {
        padding-left: 10px !important;
        padding-right: 10px !important;
    }
    #typeFilters {
        border-left: 1px solid #e4e4e4;
    }
    #typeFilters .check-label {
        font-size: 16px;
    }
    #typeFilters .dr-form .dr-checkbox label:before {
        top: 2px;
    }
    .review-keyword:link,  .review-keyword:active,  .review-keyword:visited,  .review-keyword:hover {
        color: #fff !important;
    }
    .square-image {
        background-position: 50% 50%;
        background-repeat: no-repeat;
        -ms-background-size: cover;
        background-size: cover;
        width: 50px;
        height: 50px;
        margin: 0 auto;
    }
    .review-employee {
        cursor: pointer
    }
    .employee-image {
        min-width: 51px;
        border: 1px solid #05aec1;
    }

    .section-container {
        display: block;
    }

    #contentInner {
        background: #ffffff !important;
    }
    footer {
        clear: both;
    }
    #mainContainer {
        background: #fff !important;
    }
    @media (max-width: 990px) {
        #keywordFilters, #typeFilters {
            margin-bottom: 20px;
        }
    }
    @media (max-width: 975px){
         .employees-wrapper{
            max-width: 100%;
        }
    }

    @media (max-width: 767px){
        .review-keywords {
            overflow-x: scroll;
            overflow-y: hidden;
            white-space: nowrap;
        }
        .no-touch .review-keywords {
            padding-bottom: 10px !important;
        }
        .touch .review-keywords {
            -webkit-overflow-scrolling: touch;
        }
        .touch .review-keywords::-webkit-scrollbar {
              display: none;
          }
        .review-keyword {
            display: inline-block;
            float: none;
            margin-right: 10px;
            margin-bottom: 0;
        }
        #reviews .chatLink {
        float: right !important;
        display: inline-block !important;
        }
        #keywordFilters, #typeFilters {
            margin-bottom: 35px;
        }
        #typeFilters {
            border-left: none;
        }
        #typeFilters p {
            margin-bottom: 5px;
        }
        #reviews .war {
            margin-top: 30px;
        }
        .sortByWrapper {
            float: left;
            display: block;
        }
        .sortByWrapper span {
            display: block;
            float: none !important;
        }

    }

    @media (max-width: 430px) {
        #reviews .war {
           float: left !important;
            margin-top: 10px;
            clear: both;
            display: block !important;
        }
    }

    @media (max-width: 480px) and (orientation: landscape)
        {
            #mobile-lotshot
            {
                overflow-y: auto;
            }
            /* #mobile-lotshot-image{
                max-height: 180px !important;
                max-width: 380px;
                margin-left:auto;
                margin-right:auto;
            }*/
        }


        #mobile-lotshot-image
        {
            max-height: inherit !important;
            max-width: 100%;
            width: auto;
            height: auto;
            padding: 10px;
            background: #fff;
            margin-top: 10px;
        }

        #mobile-lotshot
        {
            display: none;
            position: fixed;
            top: 45px;
            left: 0;
            z-index: 2;
            width: 100%;
            height: 100% !important;
            padding: 10px !important;
            background: #ccc;
        }


</style>

<script type="text/javascript">
window._mfq = window._mfq || [];
(function() {
var mf = document.createElement('script'); mf.type='text/javascript'; mf.async = true;
mf.src = '//cdn.mouseflow.com/projects/ee6926e5-5b80-444b-bb27-cc35694a40b1.js';
document.getElementsByTagName('head')[0].appendChild(mf);
})();</script>



                </div>
            </content>
            <div class="visible-xs"></div><!-- Leave this here - use to tell if in mobile layout or not -->
            <!-- FOOTER -->
            <footer class="fill-width bg-footer-grey font-16 ">
                <div id="footerContainer">
                    <div class="col-xs-12 pad-bottom-mdlg text-left ">
                        <div class="col-xs-12 pad-none pad-top-md pad-bottom-lg text-center visible-xs">
                            <a href="https://www.facebook.com/DealerRater" class="footer-social-circle margin-left-none" target="_blank"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-facebook-trans.png" /></a>
                            <a href="https://www.linkedin.com/company/dealerrater?trk=top_nav_home" class="footer-social-circle" target="_blank"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-linkedin-trans.png" /></a>
                            <a href="https://www.youtube.com/user/dealerrater" class="footer-social-circle" target="_blank"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-youtube-trans.png" /></a>
                            <a href="https://twitter.com/dealerrater" class="footer-social-circle" target="_blank"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-twitter-trans.png" /></a>
                        </div>
                        <div class="col-xs-12 col-sm-6 pad-none">
                            <div class="col-xs-6 col-sm-4 pad-left-none">
                                <ul>
                                    <li>
                                        <a href="https://www.dealerrater.com" title="U.S." class="black font-12 boldest">U.S. </a>
                                        <span style="color: #00AFC4" class="boldest"> | </span>
                                        <a href="https://www.dealerrater.ca" title="Canada" class="black font-12 bold"> Canada </a>
                                    </li>
                                    <li><a href="/consumer/company" title="About Us" class="black font-12 bold">About Us</a></li>
                                    <li><a href="/consumer/company/careers" title="Careers" class="black font-12 bold">Careers</a></li>
                                    <li><a href="/consumer/company/contact-us" title="Contact Us" class="black font-12 bold">Contact Us</a></li>
                                    <li class="visible-xs"><a href="/dealers" title="For Dealers" class="black font-12 bold">For Dealers</a></li>
                                    <li class="visible-xs"><a href="https://dealerrater.uservoice.com/" title="Help Center" class="black font-12 bold">Help Center</a></li>
                                    <li><a href="https://www.dealerrater.com/recalls/" title="Car Recalls" onclick="recordEvent('Global-Header', 'car-recalls_click', location.href, null, false);" class="black font-12 bold">Car Recalls</a></li>
                                </ul>

                            </div>
                            <div class="col-xs-6 col-sm-4 pad-left-none">
                                <ul>
                                    <li>
                                        <a href="https://www.dealerrater.com/info/privacy/" title="Privacy Policy" class="black font-12 bold">Privacy Policy</a>
                                    </li>
                                    <li>
                                        <a href="https://www.dealerrater.com/info/tou/" title="Terms of Use" class="black font-12 bold">Terms of Use</a>
                                    </li>
                                    <li class="visible-xs">
                                        <a href="https://www.dealerrater.com/info/ccpa-privacy-notice/" title="California Privacy Notice" class="black font-12 bold">California Privacy Notice</a>
                                    </li>
                                    <li>
                                        <a href="https://www.dealerrater.com/info/community/" title="Community Guidelines" class="black font-12 bold">Community Guidelines</a>
                                    </li>
                                    <li>
                                        <a href="https://dealerrater.uservoice.com/knowledgebase/articles/844902-dealerrater-frequently-asked-questions" title="FAQ" class="black font-12 bold">FAQ</a>
                                    </li>
                                    <li><a href="/common/sitemap" title="Sitemap" class="black font-12 bold">Sitemap</a></li>
                                </ul>
                            </div>
                            <div class="col-xs-6 col-sm-4 pad-left-none hidden-xs">
                                <ul>
                                    <li><a href="/dealers" title="For Dealers" class="black font-12 bold">For Dealers</a></li>

                                    <li><a href="https://dealerrater.uservoice.com/" title="Help Center" class="black font-12 bold">Help Center</a></li>

                                    <li>
                                        <a href="https://www.dealerrater.com/info/ccpa-privacy-notice/" title="California Privacy Notice" class="black font-12 bold">California Privacy Notice</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-6 pad-none pad-top-mdlg text-right hidden-xs">
                            <a href="https://www.facebook.com/DealerRater" title="Facebook" target="_blank" class="footer-social-circle"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-facebook-trans.png" /></a>
                            <a href="https://www.linkedin.com/company/dealerrater?trk=top_nav_home" title="LinkedIn" target="_blank" class="footer-social-circle"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-linkedin-trans.png" /></a>
                            <a href="https://www.youtube.com/user/dealerrater" target="_blank" title="YouTube" class="footer-social-circle"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-youtube-trans.png" /></a>
                            <a href="https://twitter.com/dealerrater" target="_blank" title="Twitter" class="footer-social-circle"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-twitter-trans.png" /></a>
                        </div>
                    </div>
                    <div class="col-xs-12 pad-top-md border-top">
                        <div class="grey font-13 bold uppercase letter-spacing-1 footer-copyright">&copy; 2021 DR Media Holdings, LLC</div>

                    </div>
                </div>
            </footer>


        </div>

    </div>
    <div id="dr-notify">
        <div class="table width-100 word-break">
            <div class="td td-icon thumbsup display-none text-left">
                <img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-thumbsup-green.png" width="68" />
            </div>
            <div class="td td-icon exclaim text-left display-none">
                <img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-red-alert.png" width="68" />
            </div>
            <div class="td text-left">
                <p>
                    <span class="bolder notify-title"></span>
                    <span class="notify-text"></span>
                </p>
            </div>
            <div class="td text-right"><img class="close-notify pointer margin-left-lg margin-right-md" src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-notification-close.png" width="25" /></div>
        </div>
    </div>
    <style>
        .dealerAutocomplete.ui-menu .ui-menu-item:last-of-type {
            border-bottom: none;
        }

        #dp-signin-notify {
            position: absolute;
            left: -182px;
            top: 5px;
            z-index: 1;
            background: #fff;
            border-width: 2px;
            padding: 10px !important;
        }

            #dp-signin-notify:after, #dp-signin-notify:before {
                left: 100%;
                top: 18px;
                border: solid transparent;
                content: " ";
                height: 0;
                width: 0;
                position: absolute;
                pointer-events: none;
            }

            #dp-signin-notify:after {
                border-color: rgba(204, 0, 0, 0);
                border-left-color: #fff;
                border-width: 8px;
                margin-top: -8px;
            }

            #dp-signin-notify:before {
                border-color: rgba(194, 225, 245, 0);
                border-left-color: #d2d2d2;
                border-width: 11px;
                margin-top: -11px;
            }

        @media(max-width:1024px) {
            #dp-signin-notify {
                left: -150px;
            }
        }

        @media (max-width: 975px) {
            #dp-signin-notify {
                display: none;
            }
        }
    </style>

    <!-- scripts down here to improve website rendering performance -->
    <script src="https://www.dealerrater.com/ncdn/bundle/s/183.20210104.1/ResponsiveScriptBundle.bundle.js?v=qZctqyAQMFVxwL4j8-F_rFUaW-7wN1q_AJoHxAND4EM1"></script>

    
    <script type="text/javascript">
        // after the click of the element, disable the click for 3 seconds.
        function isMultipleClicked(element) {
            //if already clicked return TRUE to indicate this click is not allowed
            if (element.data("isclicked")) return true;

            //mark as clicked for 3 seconds
            element.data("isclicked", true);
            setTimeout(function () {
                element.removeData("isclicked");
            }, 3000);

            //return FALSE to indicate this click was allowed
            return false;
        }

        // FIXME: A/B TEST FOR NAV LINKS 
        $('.headerLinkAbTest').click(function () {
           window['optimizely'] = window['optimizely'] || [];
            window['optimizely'].push({
                type: "event",
                eventName: "HeaderLinkClick"
            });
        });
        
        
    </script>


    
    
<style type="text/css">
    .dr-captcha-dialog {
        width: 100% !important;
        display: none;
    }
</style>
<script src="https://www.google.com/recaptcha/api.js?onload=GoogleCaptcha_onCaptchaLoad&render=explicit"
        async defer>
</script>
<script type="text/javascript">
    
    function GoogleCaptchaInstance(siteKey, containerId, onCaptchaResult, theme) {
        
        var options = {
            widgetId: null,
            siteKey: siteKey,
            containerId: containerId,
            onCaptchaResult: onCaptchaResult,
            theme: theme
        };

        
        options.widgetId = grecaptcha.render(options.containerId, {
            'sitekey': options.siteKey,
            'callback': options.onCaptchaResult,
            'theme': options.theme
        });

        

        
        this.reset = function () {
            grecaptcha.reset(options.widgetId);
        };

        
        this.result = function () {
            return grecaptcha.getResponse(options.widgetId);
        };
    }

    var GoogleCaptcha_onCaptchaLoad = function () {
        // Widget loaded, call Render operations
        GoogleCaptcha.onReady();
    };

    // Google Captcha factory for creating instances
    var GoogleCaptcha = (function () {
        // Private members
        var siteKey = "6LcGWBcTAAAAAGq4Xqv08tUxBU8fhsKYUSBJFHX4";
        var captchaInstances = {};

        // Public methods
        return {
            create: function (containerId, onCaptchaResult, theme) {
                
                if (captchaInstances[containerId] == null)
                    captchaInstances[containerId] = new GoogleCaptchaInstance(siteKey, containerId, onCaptchaResult, theme);
                return captchaInstances[containerId];
            },
            onReady: function() {}
        };
    })();

    
    GoogleCaptcha.ShowCaptchaDialog = function (options) {
        
        options = options || { instanceId: 0, success: function(response) {}, failure: function() {}, title: "" };
        
        var dialogId = 'captcha-dialog-'+options.instanceId;
        var containerId = 'captcha-container-'+options.instanceId;
        var $dialogDiv = $('#' + dialogId);
        var $containerDiv = $('#' + containerId);
        
        
        if ($dialogDiv.length === 0) {
            $dialogDiv = $('<div/>');
            $dialogDiv.attr('id', dialogId);
            $dialogDiv.attr('title', options.title);
            $dialogDiv.addClass('dr-captcha-dialog');

            $('body').append($dialogDiv);

            
            var $captchaCaption = $('<h2/>');
            $captchaCaption.text("One last step! Verify you're a human.");
            $captchaCaption.addClass('popup-title');

            $dialogDiv.append($captchaCaption);

            var $captchaCloseBtn = $('<a/>');
            $captchaCloseBtn.attr("href", "#");
            $captchaCloseBtn.addClass("popup-close");
            $dialogDiv.append($captchaCloseBtn);
        }

        
        if ($containerDiv.length === 0) {
            $containerDiv = $('<div/>').attr('id', containerId);
            $containerDiv.addClass("popup-content-wrapper text-center");
            $dialogDiv.append($containerDiv);

        }

        // create captcha & setup callbacks
        var dialogCaptcha = GoogleCaptcha.create(containerId, function(result) {
            $containerDiv.removeClass('input-validation-error');

            // Invoke callbacks
            if (result != null && $.trim(result).length > 0) {
                options.success(result);
                $dialogDiv.dialog('close');
            } else {
                $containerDiv.addClass('input-validation-error');
            }
        });

        
        var captchaDialogCloseFunction = function() {
            dialogCaptcha.reset();
        };
        window.setUpDialog($dialogDiv, null, captchaDialogCloseFunction);
        $dialogDiv.dialog("open");
    }
</script>    
    <script type="text/javascript">
    // on click of "read more", open or close review content
    $(".read-more-toggle").click(function () {
        // toggle parent open class
        var reviewWrapperElem = $(this).closest('.review-wrapper');
        $(reviewWrapperElem).toggleClass("open");

        // change text of read more link
        if ($(reviewWrapperElem).hasClass("open")) {
            $(reviewWrapperElem).find(".read-more-toggle").html("Read Less");

            // show public messages
            $(reviewWrapperElem).find("p.review-response").each(function () {
                $(this).text($(this).data("originalText"));
                $(this).parent().addClass("open");
                $(this).css("max-height", "none");
            });
            $(reviewWrapperElem).find("a.response-toggle").html("Read Less");

        } else {
            $(reviewWrapperElem).find(".read-more-toggle").html("Read More");

            // hide public messages
            $(reviewWrapperElem).find("p.review-response").each(function () {
                $(this).text($(this).data("shortText"));
                $(this).parent().removeClass("open");
                $(this).css("max-height", "40px");
            });
            $(reviewWrapperElem).find("a.response-toggle").html("Read More");

        }
        return false;
    });

    $(".review-response").each(function() {
        var responseHeight = $(this).height();
        $(this).css('max-height', '40px');
        if (responseHeight > 40) {
            $(this).parent().find(".message-read-more").removeClass("display-none");
        }
    });

    /**
* Marks a review as helpful to the viewer.  Site visitors can up-vote a review once per browser
* session, enforced by a cookie.
* @param id The review ID to up vote.
*/
    function MarkReviewHelpful(id, elem) {
        $(elem).removeAttr('onClick');
        // only mark the review as helpful one time...
        if ($.cookie("HelpfulReviewIds") == null ||
            $.inArray(id.toString(), $.cookie('HelpfulReviewIds').split(':')) == -1) {
            // grab the node that has the count, show it (if it isn't visible) and increment the value
            var countNode = $('#helpful_count_' + id);
            countNode.show();
            countNode.text(parseInt(countNode.text()) + 1);

            // call the AJAX endpoint to audit
            $.getJSON('/json/reviews/helpful?reviewId=' + id);
        }
        $(elem).click(function () {
            return false;
        });
    }

    // when a tagged employee image or its contents are clicked redirect to the employee details page
    $('.review-employee').click(function () {
        var a = $(this).find('a');
        if (a.length) {
            var link = a.attr("href");
            window.location.href = link;
        }
    });

    /**
     * Shows the given lotshot image in the popup.
     * @param image The image we're showing in the popup.
     */
    function ShowLotshotImage(image) {
        var imagePath = $(image).attr("src").replace("-th", "");        
        /// if lot shot image was clicked on mobile, open in a new window
        if ($("#mobileNavContainer .logo-sm").css("height") == "35px") {            
            //window.open($(image).attr("src"));
            var lotShot = '<img src="' + imagePath + '" width="100%"/>';
            $('#mobile-lotshot-image').html(lotShot);
            toggleLotShotPage();
        }
        // else show lotshot dialog
        else {
            // preload image
            var img = new Image();
            img.onload = function () {
                // on image load show the popup (so it places itself in the right spot)
                $("#dialog_lotshot_popup img").attr("src", "");                        
                $("#dialog_lotshot_popup img").attr("src", imagePath);
                $("#dialog_lotshot_popup").dialog("open");
                $('.ui-dialog :button').blur();
            };
            img.src = imagePath;     
        }
    }

    /**
     * Toggles when to show the mobile lotshot image.
     */
    function toggleLotShotPage() {
        $('#mobile-lotshot').toggle();
    }

    
    window.setUpDialog($("#dialog_lotshot_popup"), null, null);

</script>




<script>
    var pageScrolled = false;

    function recordAdobeDataLayerBannerClick(isDefault) {
        if (!isDefault) {
            window.digitalData.campaign = {
                bannerClick: true
            };
        }
    }

    $(document).ready(function () {
        $("#warButton").attr("href", "/consumer/writereviews/23685" + "?source=drp");

                
                    window['optimizely'] = window['optimizely'] || [];
                    window['optimizely'].push({
                        type: "event",
                        eventName: "LeadFormTestPageLoad"
        });
                    window.recordEvent('LeadFormTest',
                        'opt-Lead-pageLoad',
                        '23685',
                        null,
                        false);
                

        $(".extra-service").last().css("border-right", "none");
        
        window.digitalData.campaign = {
        dealerId: 23685
        };
        window.digitalData.dealer = {
        dealerId: 23685,
            dealerName: "McKaig Chevrolet Buick - A Dealer For The People",
            dealerType: "dealer"
        };

        var jsonUrl = '/json/dealer/hours';
        $.ajax({
        url: jsonUrl,
            type: "GET",
            cache: false,
            data: { dealerId: 23685, hoursType: 'SALES', salesHoursUpdate: 'NoChange', serviceHoursUpdate: 'NoChange' }
        }).done(function(partialViewResult) {
            $(".dealer-hours").empty().append(partialViewResult);
        });

        // on hover of rating, show rating details
        $(".rating-details").hover(function () {
            $("#rating-details").toggle();
            return false;
        });

        // GOOGLE ANALYTICS
        if ($("#serviceLink").length > 0)
        {
            recordEvent('Dealer-Profile', 'Service-Center-tab_display', '23685', null, true);
        }

        // awards dialog
        // tablet / desktop awards dialog click
        $(".view-awards").click(function () {
            var awardWidth = 685;
            if ($(".award").length == 1) {
                awardWidth = 300;
            }
            else if ($(".award").length == 2) {
                awardWidth = 450;
            }

            // create and open awards dialog
            var closeAwardsDialogFunction = function() {
                $("#awardsDialog").dialog("destroy");
            };
            window.setUpDialog($("#awardsDialog"), null, closeAwardsDialogFunction);
            $("#awardsDialog").dialog("open");

            return false;
        });
            recordEvent('Dealer-Profile', 'Certified-Dealer_display', '23685', null, true);
        $(".tagged-emp").click(function () {
            var empId = $(this).attr("data-emp-id");
            recordEvent('Dealer-Profile', 'Tagged-Employee_Reviews_click', empId, null, false);
        });

            
                // on hover of badge image, show tooltip
                $(".badge-tooltip").hover(function () {
                    $("#badge-tooltip").toggle();
                    return false;
                });

                var originalAbout = $(".about-us").html();
                $(".about-us").ellipsis({
                    row: 6, onlyFullWords: true, html:true,
                    callback: function () {
                        if ($(this).html() != originalAbout) {
                            $(this).data("originalText", originalAbout);
                            $(this).data("shortText", $(this).html());
                            var readMoreLink = $("#readMoreAbout");
                            $(readMoreLink).show();
                            $(readMoreLink).click(function () {
                                recordEvent('Dealer-Profile', 'Description-Read-More_click', '23685', null, true);

                                var aboutUsText = $(".about-us");
                                // hide
                                if ($(this).parent().hasClass("open")) {
                                    $(aboutUsText).html($(aboutUsText).data("shortText"));
                                    $(this).html("Read More");
                                    $(this).parent().removeClass("open");
                                }
                                // show
                                else {
                                    $(aboutUsText).html($(aboutUsText).data("originalText"));
                                    $(this).html("Read Less");
                                    $(this).parent().addClass("open");
                                }
                                return false;
                            });
                        }
                    }
                });

                var originalAbout = $(".about-us-mobile").html();
                $(".about-us-mobile").ellipsis({
                    row: 3, onlyFullWords: true, html:true,
                    callback: function () {
                        if ($(this).html() != originalAbout) {
                            $(this).data("originalText", originalAbout);
                            $(this).data("shortText", $(this).html());
                            var readMoreLink = $("#readMoreAboutMobile");
                            $(readMoreLink).show();
                            $(readMoreLink).click(function () {
                                recordEvent('Dealer-Profile', 'Mobile-description-Read-More_click', '23685', null, true);

                                var aboutUsText = $(".about-us-mobile");
                                // hide
                                if ($(this).parent().hasClass("open")) {
                                    $(aboutUsText).html($(aboutUsText).data("shortText"));
                                    $(this).html("Read More");
                                    $(this).parent().removeClass("open");
                                }
                                // show
                                else {
                                    $(aboutUsText).html($(aboutUsText).data("originalText"));
                                    $(this).html("Read Less");
                                    $(this).parent().addClass("open");
                                }
                                return false;
                            });
                        }
                    }
                });

                var hoursDialogCloseFunction = function() {
                    $("#hoursDialog").dialog("destroy");
                    $(".ui-widget-overlay, #hoursDialog .popup-close").unbind();
                };


                // desktop / tablet hours dialog
                $(document).on('click', '.hidden-xs .view-hours', function () {
                    window.setUpDialog($("#hoursDialog"), null, hoursDialogCloseFunction);

                    $("#hoursDialog").dialog("open");
                    return false;
                });

                // mobile hours dialog
                $(document).on('click', '.visible-xs .view-hours', function () {
                    toggleMobilePage('hoursDialog');
                    return false;
                });

            
                    

                // persistent nav
                var mobilePersistentNav = $('#mobileContactDealershipFixed').length > 0;
                var mobilePageNavTop = 0;
                if (mobilePersistentNav) {
                    mobilePageNavTop = $('#mobileContactDealershipFixed').offset().top + 30;
                }

                var reviewPageNavTop = $('.review-page-nav').offset().top + 10;

                $(window).scroll(function () {
                    if (pageScrolled) {
                        if ($(".visible-xs").css("display") != "block") {
                            if ($(window).scrollTop() > reviewPageNavTop) {
                                $('#persistentNav').slideDown();
                            } else {
                                $('#persistentNav').slideUp();
                            }
                        } else {
                            if ($(window).scrollTop() > mobilePageNavTop  && ($(".mobile-hide").css("display") == "block")) {
                                $('#persistentNav').css("position", "fixed");
                                $('#persistentNav').css("top", "45px");
                                $('#persistentNav').css("left", "0");
                                $('#persistentNav').css("z-index", "1001");

                                $('.mobile-persistant-nav').show();
                                $('#persistentNav').slideDown();
                            } else {
                                $('#persistentNav').css("position", "relative");
                                $('#persistentNav').css("z-index", "auto");

                                $('#persistentNav').slideUp();
                                $('.mobile-persistant-nav').hide();
                            }

                        }
                    }
                    pageScrolled = true;
                });
        window.setUpDialog($('#dialog_in_progress'), null, null);
        });

    function toggleMobilePage(divName) {
        $(".mobile-hide").toggle();
        $("#mobileBack").toggle();
        if (($("#hoursDialog").css("display") == "block") || (divName == "hoursDialog")) {
            $("#hoursDialog").toggle();
        }
        else if (($("#awardsDialog").css("display") == "block") || (divName == "awardsDialog")) {
            $("#awardsDialog").toggle();
        }
    }

    function clickToCallEvent() {
        window.recordEvent('Click_to_Call', 'Dealer_Profile_Sales_click', '23685', 1, false);
    }

    function viewDealerWebsiteEvent() {
        window.recordEvent('Dealer-Profile', 'Visit-Dealer-link_click', '23685', null, false);
    }

</script>
<script type="application/ld+json">
    {
    "@context": "http://schema.org",
    "@type": "LocalBusiness",
    "name" : "McKaig Chevrolet Buick - A Dealer For The People",
    "address": {
    "@type": "PostalAddress",
    "streetAddress": "1110 E Broadway Ave (US 80 @ E Loop 485)",
    "addressLocality": "Gladewater",
    "addressRegion" : "TX",
    "postalCode" : "75647",
    "addressCountry" : "US"
    },
    "telephone" : "(903) 374-0469",
        
            "aggregateRating": {
            "@type": "AggregateRating",
            "ratingValue": 4.9,
            "reviewCount" : 2009,
            "bestRating" : 5,
            "worstRating" : 0
            },
        
    "url" : "https://www.mckaigchevrolet.com/"
    }
</script>
    <script>
    function resetEmployeeReviewDetails() {
        $('.float-emp-wrapper .review-content-all').hide();
        $('.float-emp-wrapper .review-snippet').show();

        $('.float-emp-wrapper .read-less').hide();
        $('.float-emp-wrapper .read-more').show();

        $('.float-emp-wrapper .employee-reviews').hide();
    }


    $(document).ready(function() {
        $("#appUI").deviceformfactor();
        $("#appUI").deviceformfactor("calculate");
        formFactor = $("#appUI").data("device-form-factor");

        // load employees
        var jsonUrl = '/json/dealeremployees/selectemployeepartialview-ab';

        var dataValues = { dealerId: 23685 };

        $.ajax({
            url: jsonUrl,
            type: "GET",
            cache: false,
            data:dataValues
        }).done(function(partialViewResult) {
            var numEmployees = $(partialViewResult).find(".float-emp-wrapper").length;
            if (numEmployees == 0) {
                $(".dr-form-no-emp").show();
                $(".dr-form").addClass("no-emp").show();
                $(".dr-form-emp").remove();
            } else {
                $("#allEmployees").append(partialViewResult);
                $(".dr-form-skip-emp").removeClass("display-none");
                $(".float-emp-wrapper").click(function () {
                    $(this).removeClass("hide-select");
                    $(".dr-form-emp-back").removeClass("display-none");
                    $(".hide-select").hide();
                    $(".dr-form").show();
                    $("#allEmployees").addClass("closed");
                    $(this).find(".employee-reviews").show();
                    $("#selectedEmployeeId").val($(this).attr("data-emp-id"));
                    $("#selectedEmployeeName").val($(this).attr("data-emp-name"));
                    $(".dr-form-skip-emp").addClass("display-none");
                });
                $(".dr-form-skip-emp").click(function () {
                    $(this).addClass("display-none");
                    $(".skipped-heading").removeClass("display-none");
                    $(".dr-form-emp-back").removeClass("display-none");
                    $(".hide-select").hide();
                    $(".dr-form").show();
                    $("#allEmployees").addClass("closed");
                    $(this).find(".employee-reviews").show();
                    $("#selectedEmployeeId").val("");
                    $("#selectedEmployeeName").val("");
                    return false;
                });
            }
        });


        var generateInventoryLeadFormOptionsAB = function () {
            var contactType = 'Email';
            var email = $('#floatingContactForm #floatingEmail').val();
            var sourceType = "DealerReviewPage";
            var message = $("#floatingContactForm #floatingMessage").val();

            var selectedEmployeeId = $("#floatingContactForm #selectedEmployeeId").val();
            if (message == null || message.trim() === '') {

                var workingWith = "your dealership";
                if (selectedEmployeeId != null && selectedEmployeeId.length > 0) {
                    workingWith = $('#floatingContactForm #selectedEmployeeName').val();
                }
                message =
                    "I'm interested in working with " + workingWith +" and request to be contacted.";
            }
            var options = {
                type: "POST",
                url: '/json/connections/contact',
                cache: false,
                data: {
                    DeviceFormFactor: window.formFactor,
                    DealerId: $("#floatingContactForm #DealerId").val(),
                    Name: $("#floatingContactForm #floatingName").val(),
                    EmailAddress: email,
                    ContactType: contactType,
                    SelectedEmployee: selectedEmployeeId,
                    Note: message,
                    SourceType: sourceType,
                    Vin: $("#floatingContactForm #Vin").val(),
                    AbTest: "25829-test-variant1"
                },
                success: function () {
                    var trkVal = null;
                    if (selectedEmployeeId != null) {
                        trkVal = parseInt(selectedEmployeeId);
                    }
                    window.recordEvent('Dealer-Profile', 'Mobile_DealerLead_Submit', $("#floatingContactForm #DealerId").val(), trkVal, false);

                    $(".floating-form .dr-form").fadeOut("fast", function () {
                        $(".floating-form").addClass("success");
                        $(".dr-form-emp").hide();
                        $(".dr-form-no-emp").hide();
                        $(".floating-form .dr-success").fadeIn();
                    });

                }
            };
            return options;
        }

            $(".floating-contact").delay(2500).effect("shake", {direction: "up", distance: 10, times:3}, 1000);

        // click events
        $(".floating-contact").click(function () {
            $(".floating-form").fadeIn();
            $(".floating-close").fadeIn();
            $(".floating-contact").fadeOut();
            return false;
        });
        $(".dr-form-emp-back").click(function () {
            $(".float-emp-wrapper").addClass("hide-select");
            $(".hide-select").show();
            $(".dr-form").hide();
            $(this).addClass("display-none");
            $("#allEmployees").removeClass("closed");
            $(".skipped-heading").addClass("display-none");
            $(".dr-form-skip-emp").removeClass("display-none");
            resetEmployeeReviewDetails();
            return false;
        });

        $(".floating-close").click(function () {
            $(".floating-form").fadeOut("fast", function () {
                if (!$(".dr-form").hasClass("no-emp") && !($(".floating-form").hasClass("success"))) {
                    if ($("#allEmployees").hasClass("closed")) {
                        $(".floating-form .dr-emp-form").hide();
                        $(".floating-form .dr-form").show();
                    } else {
                        $(".floating-form .dr-emp-form").show();
                        $(".floating-form .dr-form").hide();
                    }
                }
            });
            $(".floating-close").fadeOut();
            $(".floating-contact").fadeIn();

            return false;
        });

        $("#sendMessage").click(function (e) {
            e.preventDefault();

            if (!$(this).hasClass("disabled")) {
                if ($("#floatingContactForm").valid()) {
                    $(this).addClass("disabled");

                    
                
                    GoogleCaptcha.ShowCaptchaDialog(
                        {
                            instanceId: $(this).closest('form').attr('id'),
                            success: function (captchaResult) {
                                $("#appUI").deviceformfactor("calculate");
                                // Validate the form then apply Captcha workflow
                                var options = generateInventoryLeadFormOptionsAB();

                                options.data.captchaResult = captchaResult;

                                $.ajax(options);
                            }
                        });
                


                }
            }

            return false;
        });
    });

    $(document).on("click",
        '.float-emp-wrapper .read-more-less',
        function(event) {
            var reviewId = $(this).data('review-id');
            var toggleReviewContent = ".review-content-" + reviewId;
            $(toggleReviewContent).toggle();

            var toggleReadMoreLess = ".read-more-less-" + reviewId;
            $(toggleReadMoreLess).toggle();
            return false;
        });

    $("#floatingSubject").change(function () {
        var vehicleCondition = $("#floatingContactForm #Condition").val();
        var year = $("#floatingContactForm #ModelYear").val();
        var make = $("#floatingContactForm #Make").val();
        var model = $("#floatingContactForm #Model").val();
        var price = $("#floatingContactForm #Price").val();

        if (price == undefined || price == 0) {
            price = "N/A";
        } else {
            price = "$" + Number(price).toLocaleString("en-US");
        }

        if ($(this).val() == "Check availability") {
            $("#floatingMessage").val("I'd like to know if the " + vehicleCondition + " " + year + "/" + make + "/" + model + " you have listed on DealerRater for " + price + " is still available.");
        }
        else if ($(this).val() == "Get a price quote") {
            $("#floatingMessage").val("I'd like to know your best price for the " + vehicleCondition + " " + year + "/" + make + "/" + model + " you have listed on DealerRater for " + price + ".");
        }
        else if ($(this).val() == "Request more photos") {
            $("#floatingMessage").val("I'd like to request additional photos of the " + vehicleCondition + " " + year + "/" + make + "/" + model + " you have listed on DealerRater for " + price + ".");
        }
        else if ($(this).val() == "Schedule a test drive") {
            $("#floatingMessage").val("I'd like to schedule a test drive with the " + vehicleCondition + " " + year + "/" + make + "/" + model + " you have listed on DealerRater for " + price + ".");
        }
        else if ($(this).val() == "Ask a question") {
            $("#floatingMessage").val("I have a question about the " + vehicleCondition + " " + year + "/" + make + "/" + model + " you have listed on DealerRater for " + price + ".");
        } else {
            $("#floatingMessage").val("");
        }
    });

    </script>
<!-- DIRECTIONS DIALOG -->
<div id="directionsPopup" class="display-none pad-bottom-lg fluid-scroll">
    <h3 class="popup-title">Map and Directions to McKaig Chevrolet Buick - A Dealer For The People</h3>
    <a href="#" class="popup-close"></a>
    <div class="popup-content-wrapper">
        <div class="col-xs-12 pad-none" id="directionsWrapper">
            <div class="col-xs-12 pad-none margin-top-mdlg">
                <div id="map-canvas"></div>
                <div id="map-summary" class="col-xs-12 font-18 pad-none bolder pad-top-mdlg pad-bottom-sm display-none">
                    <div id="mapSummary" class="pull-left"></div>
                    <div id="mapPrint" class="pull-right bg-orange-lt pointer margin-left-lg"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-directions-print.png" width="30" /></div>
                    <div id="mapReverse" class="pull-right bg-orange-lt pointer margin-right-md margin-left-lg"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-directions-reverse.png" width="30" /></div>
                    <div id="walking" class="travel-mode pull-right bg-orange-lt margin-right-md"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-directions-walk.png" width="30" /></div>
                    <div id="bicycling" class="travel-mode pull-right bg-orange-lt margin-right-md"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-directions-bike.png" width="30" /></div>
                    <div id="transit" class="travel-mode pull-right bg-orange-lt  margin-right-md"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-directions-train.png" width="30" /></div>
                    <div id="driving" class="active travel-mode pull-right bg-orange-lt margin-right-md"><img src="https://www.dealerrater.com/ncdn/s/183.20210104.1/Graphics/icons/icon-directions-car.png" width="30" /></div>
                </div>
                <div class="clear-fix"></div>

            </div>

            <!--Placeholder for turn by turn directions -->
            <div class="col-xs-12 display-none pad-none" id="directions-panel">
            </div>

            <div class="col-xs-12 pad-none margin-top-lg margin-bottom-lg" id="get-directions">
                <p class="font-14 uppercase bold letter-spacing-1 margin-bottom-none">Enter your starting address</p>
                <input id="start" type="text" class="pad-sm font-16 line-height-150 rounded border-all regular pull-left notranslate" style="width: 50%;" placeholder="" />
                    <input id="end" type="hidden" value="1110 E Broadway Ave (US 80 @ E Loop 485) , Gladewater, TX 75647" />
                <input type="button" id="getDirection" class="regular primary-button teal pull-right outline-none" onclick="javascript:calcRoute();" value="Get Directions" />
            </div>

            <div class="clear-fix"></div>
        </div>
    </div>
</div>
<!-- END DIRECTIONS DIALOG -->


<style>
    #directionsWrapper .primary-button {
        font-size: 16px !important;
    }
     .directions-popup{
         top: 50px !important;
         width: 700px !important;
     }   
    #mapSummary {
        width: 240px;
    } 
    #directionsPopup .popup-content-wrapper {
        height: 400px !important;
    }
    #directionsPopup.open .popup-content-wrapper{
        height: 640px !important;
    }
    .adp-placemark td {
        padding: 5px 10px;
        vertical-align: middle;
    }
    td.adp-text {
        padding-left: 0;
        font-family: MuseoSans-300;
        font-size: 18px;
    }
    .adp-directions {
        font-size: 16px;
    }
    .adp-legal {
        font-size: 12px;
        font-family: MuseoSans-300;
        color: #656465;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-top: 20px;
    }
    .ui-widget-overlay {
        position: fixed;
    }
    .travel-mode, #mapPrint, #mapReverse {
        -ms-border-radius: 50%;
        border-radius: 50%;
        padding: 8px;
    }
    .travel-mode.active {
        background: #00adc2 !important;
    }
    #directionsWrapper {
        padding: 0 5px !important;
    }
</style>



<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places&key=AIzaSyC6Ab0FcmWAe0YHQMWu-eWQB_dzufXC_Zw"></script>
<script>
    var map;
    var directionsDisplay;
    var directionsService;
    var stepDisplay;
    var markerArray = [];
    var marker;
    var placeSearch, autocomplete;

    function initialize() {
        // Instantiate a directions service.
        directionsService = new google.maps.DirectionsService();

        autocomplete = new google.maps.places.Autocomplete(
            (document.getElementById('start')),
            { types: ['geocode'] }
        );

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
        });

        // Create a map
        var mapOptions = {
            zoom: 10,
            center: new google.maps.LatLng("32.5335", "-94.9297")
        }
        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

        // Create a renderer for directions and bind it to the map.
        var rendererOptions = {
            map: map
        }
        directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions)
        directionsDisplay.setPanel(document.getElementById('directions-panel'));

        var redIcon   = '//www.google.com/intl/en_us/mapfiles/ms/micons/red-dot.png';

        marker = new google.maps.Marker({
            position: new  google.maps.LatLng("32.5335", "-94.9297"),
            map:map,
            icon: redIcon
        });

        // Instantiate an info window to hold step text.
        stepDisplay = new google.maps.InfoWindow();

    }

    // Recalculate Route and redisplay directions
    function calcRoute(mode) {
        if (!(mode)){
            mode = google.maps.TravelMode.DRIVING;
        }
        else{
            mode =  mode;
        }
        var start = document.getElementById('start').value;
        var end = document.getElementById('end').value;
        var request = {
            origin: start,
            destination: end,
            travelMode: google.maps.TravelMode[mode]
        };
        directionsService.route(request, function (response, status) {
            // if directions were found, display them
            if (status == google.maps.DirectionsStatus.OK) {
                marker.setMap(null);
                directionsDisplay.setDirections(response);
                $("#directionsPopup").addClass("open");
                $("#directionsWrapper").css({"height": "640px", "overflow-y": "scroll"});
                $("#directions-panel").show();
                $("#directionsPopup").animate({ scrollTop: 0 }, "fast");
                lastCenter = map.getCenter();
                google.maps.event.trigger(map, 'resize');
                map.setCenter(lastCenter);

                setTimeout(function () {
                    $("#mapSummary").empty();
                    var travelMode = $(".travel-mode.active").attr("id");
                    $("#mapSummary").append($(document.createElement("span")).append(document.createTextNode(travelMode + " directions")).addClass("capitalize"));
                    $("#directions-panel .adp-summary").appendTo("#mapSummary");
                    $("#map-summary").show();
                });
            }
            // else if no directions, reset to search box
            else {
                $("#directions-panel").hide();
                $("#map-summary").hide();
                $(".travel-mode").removeClass("active");
                $(".travel-mode#driving").addClass("active");
            }
        });


    }
    
    function getDirections() {
        initialize();
        var directionsPopupOpenFunction =  function() {
            window.scrollTo(0, 0);

            // make height larger if already got directions
            if ($("#map-summary").css("display") == "block") {
                $("#directionsPopup").css("height", "700px !important");
                $("#directionsWrapper").css("height", "640px");
            }
            $(".pac-container").addClass("notranslate");
        };

        window.setUpDialog($("#directionsPopup"), directionsPopupOpenFunction, null, "directions-popup");
        $("#directionsPopup").dialog("open");

        lastCenter = map.getCenter();
        google.maps.event.trigger(map, 'resize');
        map.setCenter(lastCenter);
    }


    // On document ready, add click listeners
    $(document).ready(function () {
        // Change travel mode
        $(".travel-mode").click(function () {
            $(".travel-mode").removeClass("active");
            $(this).addClass("active");
            calcRoute($(this).attr("id").toUpperCase());
        });

        // Print directions
        $("#mapPrint").click(function () {
            var printWindow = window.open();
            printWindow.document.write($(".wide-directions").html());
            printWindow.document.write("<style>#map-summary, #get-directions, .ui-dialog-titlebar{display: none !important;}</style>");
            printWindow.document.close(); //this seems to be the thing doing the trick
            printWindow.focus();
            printWindow.print();
            printWindow.close();
        });

        // Reverse directions
        $("#mapReverse").click(function () {
            var start = $("#start").val();
            var end = $("#end").val();
            var mode = $(".travel-mode.active").attr("id").toUpperCase();
            $("#start").val(end);
            $("#end").val(start);

            calcRoute(mode);
        });

        
    });

</script>
<script>
    $(document).ready(function () {


                $("#BlacklistMessageViewMore").click(function () {
                    if ($(this).text() === "read more") {
                        $("#blacklistMessage").text("We are concerned that reviews posted to this dealership page may have been submitted in violation of our guidelines. Please take this into consideration as we work to make sure that we're showing you valid reviews to help find the right dealership and salesperson for you.");
                        $(this).text("read less");
                    } else {
                        $("#blacklistMessage").text("We are concerned that reviews posted to this dealership page may have been submitted in violation of our guidelines...");
                        $(this).text("read more");
                    }
                    return false;
                });

    });
</script>

    <script type="application/javascript" src="https://a01.korrelate.net/a/e/d2a.ads?r=637461627391757612&ago=598&ao=599&s=1&px=429&pt=s&et=a&lvl=&av1=CertifiedEssentials%7c360Connect%7cCustomerConnect%7cDealerRater+Connections"></script>

    <script>
        var queryParams = (function() {
            return {
                build: function(base, params) {
                    var qs = base;
                    var first = true;
                    for (var p in params) {
                        if (!params[p] || params[p].trim().length === 0) continue;
                        qs += ((first ? "?" : "&") + p + "=" + params[p]);
                        first = false;
                    }
                    return qs;
                }
            };
        }());
        // preselect correct filter option.  i had the option to bind to the model, but
        // to do that would require the creation of another enum -- more code.
        $("#review-filter option[value=ONLY_POSITIVE]").attr("selected", "true");

        // when the review filter changes, reset page to 1 and refresh
        $("#review-filter").change(function() {
            // if keyword is selected append that
            var keywordString = "";

            if ($("#review-filter option:selected").val().trim().length === 0) {
                document.location.href = queryParams.build('/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/', {"keyword":keywordString});
                return;
            }

            document.location.href = queryParams.build('/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/',
                {"filter" : $("#review-filter option:selected").val(), "keyword":keywordString})+"#link";
        });

        // when keyword is selected, reset page to 1 and refresh
        $(".review-keyword").click(function() {
            // track in GA
            window.recordEvent('Dealer-Profile', 'keyword-tag_reviews_click', '23685|' + $(this).text(), null, false);

            // if keyword is selected append that
            var filterString = "";
                filterString = "&filter=" + "ONLY_POSITIVE";

            var anchor = "#link";
            if ($(".visible-xs").css("display") == "block") {
                anchor = "#mobileLink";
            }

            document.location.href = '/dealer/McKaig-Chevrolet-Buick-A-Dealer-For-The-People-dealer-reviews-23685/?keyword=' +
                $(this).attr("data-id") +
                filterString +
                anchor;
            return false;
        });

        function highlightWord(text, word) {
            return text.replace(new RegExp(word, "gi"),
                function(x) {
                    return '<span class="highlight">' + x + '</span>';
                });
        }

        $(document).ready(function() {
            
    function ajaxCall(form, data) {
        $.ajax({
            url: form.attr('action'),
            type: form.attr('method'),
            data: data,
            success: function (result) {
                $('#dialog-report').dialog("close"); 
                if (form.attr('action') == '/json/reviews/dealerreport') {
                var reviewId = $("#ReviewId").val();
                $("#r_" + reviewId + " .report-review").removeClass("orange-lt").addClass("grey pointer-events-none");

                var source = $("#Source").val();
                if (source != 0) {
                $("#msg-dr").hide();
                $("#msg-cars").show();
                }
                }

                $("#dialog_reportReview_in_progress").dialog("close");

                window.setUpAndShowSuccessOrFailure("Your review report has been submitted.", "Check your email for more information.");

                $('.submitReport').removeAttr('disabled');
                }
                });
                }

                $(document).ready(function() {
                



                $("#dialog-report").dialog({
                autoOpen: false,
                resizable: false,
                modal: true,
                width: 650,
                dialogClass: "dr-dialog report-dialog",
                close: function () {
                $("#dialog-report label[name^=_]").hide();
                $("#dialog-report label[name^=-]").show();
                }
                });

                window.submitReport = function () {
                var form = $('#report_form');
                if ($(form).valid()) {
                $('.submitReport').attr('disabled', true);
                if (form.attr('action') == '/json/reviews/dealerreport') {
                $("#dialog_reportReview_in_progress").dialog("open");
                var formData = form.serialize();
                ajaxCall(form, formData);
                }
                else {
                window.GoogleCaptcha.ShowCaptchaDialog({
                instanceId: $(this).closest('form').attr('id'),
                success: function(result) {
                onCaptchaSuccess(result, form);
                }
                });
                }
                }
                }

                window.closeReport = function () {
                $("#dialog-report").dialog("close");
                }

                
                window.reportReview = function (id, source) {
                
                $("#report_form")[0].reset();

                
                $("#dialog-report").dialog("open");
                $("#ReviewId").val(id);

                
                if(source){
                $.validator.addMethod(
                "email_regex",
                function(value, element, regexp) {
                var re = new RegExp(regexp, "i");
                return this.optional(element) || re.test(value);
                },
                "Reviews must be reported by an employee at the dealership"
                );

                $("#EmailAddress").rules("add", { email_regex: "^((?!(@cars\.com)|(@dealerrater\.com)).)*$" })
                }
                else {
                source = 0;
                }

                $("#Source").val(source);

                
                $("#report_form").validate().resetForm();
                $("#report_form span[class=field-validation-error] span").remove();
                }

                $("#Reason").change(function () {
                if ($("#Reason").val() === "") {
                $("#dialog-report label[name^=_]").hide();
                $("#dialog-report label[name^=-]").show();
                } else {
                $("#dialog-report label[name^=-]").hide();
                $("#dialog-report label[name^=_]").hide();
                $("#dialog-report label[name^=_" + $("#Reason").val() + "]").show();
                }
                });

                window.onCaptchaSuccess = function (result, formElem) {
                $("#dialog_reportReview_in_progress").dialog("open");
                var formData = formElem.serialize() + '&' + $.param({ 'captchaResult': result });
                ajaxCall(formElem, formData);
                };

                $('#dialog_reportReview_in_progress').dialog({
                width: 375,
                height: 180,
                dialogClass: "dr-dialog",
                resizable: false,
                autoOpen: false,
                modal: true
                });


                });
;
            window.digitalData.dealer.subPages = "Dealer Reviews";


            // GA tracking for displaying keywords


            // highlight selected keyword
        });
    </script>




    <!-- Begin comScore Tag -->
    <script>
        var _comscore = _comscore || [];
        _comscore.push({ c1: "2", c2: "6036263" });
        (function () {
            var s = document.createElement("script"), el = document.getElementsByTagName("script")[0]; s.async = true;
            s.src = (document.location.protocol == "https:" ? "https://sb" : "http://b") + ".scorecardresearch.com/beacon.js";
            el.parentNode.insertBefore(s, el);
        })();
    </script>
    <noscript>
        <img src="https://sb.scorecardresearch.com/p?c1=2&c2=6036263&cv=2.0&cj=1" />
    </noscript>
    <!-- End comScore Tag -->
    <!-- common scripts for all pages -->
    <script type="text/javascript">
        window.onload = function() {  };

    
    function showLocationMessage(currentLocaleName, localeSwitchHost) {
        var promptText = "We noticed you're currently located in " +
            currentLocaleName +
            " and so are we! Please visit <a href=\"http://" + localeSwitchHost + "\">" + currentLocaleName + "</a> website for a more optimized experience.";
        $('#locationPromptText').html(promptText);
        $('#locationAlertBar').show();
    }


    function translatePlaceholders() {

        // Find all placeholders
        var placeholders = $('input[placeholder], textarea[placeholder]');

        if (placeholders.length) {
            // convert to array
            placeholders = Array.prototype.slice.call(placeholders);
            window.placeholdersToTranslate = placeholders;

            // copy placeholder text to a hidden div
            var div = $('<div id="placeholders" style="display:block"></div>');

            placeholders.forEach(function (input) {
                var text = input.placeholder;
                div.append('<div>' + text + '</div>');
            });

            $('body').append(div);

            // check for changes and update as needed
            setInterval(checkTranslated, 500);
        }
    }

        function checkTranslated()
        {
        $('#placeholders > div').each(function (i, div) {
            if (window.placeholdersToTranslate[i].placeholder != $(div).text()) {
                updatePlaceholders();
                return false;
            }
        });
    }

    function updatePlaceholders() {
        $('#placeholders > div').each(function (i, div) {
            window.placeholdersToTranslate[i].placeholder = $(div).text();
        });
    }


        $(document).ready(function () {
            // fixme login AB test
            // new hamburger
            $("#hamburgerButton").click(function() {
                $("#hamburger").toggleClass("is-active");
                toggleMobileNav();
                return false;
            });

            // google translate init

            
                if ($("#dp-signin-notify:visible").length > 0) {
                    $.cookie("suppressDpNotify", "true", { "path": "/" });

                    $("#dp-signin-notify .close-notify, body").click(function () {
                        if ($("#dp-signin-notify").css("display") == "block") {
                            $("#dp-signin-notify").hide();
                            $("#dp-signin-notify .close-notify, body").unbind();
                        }
                    });
                }
            

            $('#pushdownNoticeClose').click(function () {
                $('#pushdownNotice').fadeOut(250, function () {
                    $.cookie("suppressLocalizationPrompt", "true", { "path": "/" });
                });
            });
            //pad footer placement
            var fillH = $(window).height() - ($('footer').height() + $('header').height() +30);
            if ($('#contentInner').height() < fillH) $('#contentInner').css({ 'height': fillH });

            filterUI.handleRetina();

            
            $(window).one('scroll', function() {
                $("#footerContainer")[0].style.cssText += ';-webkit-transform:rotateZ(360deg)';
                $("#footerContainer")[0].style.cssText += ';-webkit-transform:rotateZ(0deg)';
            });

            
            if (!$.cookie("suppressLocalizationPrompt")) {
                
                var localizationCookie = $.cookie("_localization");
                if (localizationCookie) {
                    var localizationPrompt = JSON.parse(localizationCookie);
                    if(localizationPrompt.PromptIsVisible){
                        showLocationMessage(localizationPrompt.CurrentLocaleName, localizationPrompt.LocaleSwitchHost);
                    }
                } else {
                    $.ajax({
                        type: "POST",
                        url: "/json/localization/getlocalizationprompt",
                        success: function (data) {
                            $.cookie("_localization", JSON.stringify(data), { expires: 365, path: '/' });
                            if (data.PromptIsVisible) {
                                showLocationMessage(data.CurrentLocaleName, data.LocaleSwitchHost);
                            }
                        }
                    });
                }
            }
        });

    
    $('.submit-once').submit(function() {
        $('.submit-once').submit(function(e) {
            e.preventDefault();
        });
    });

    </script>

    <script>
        var acDisplayed = false;
        $('#headerAutoComplete, #mobileAutoComplete').keyup(function () {
            var elem = $(this);
            setTimeout(function () {
                if (!acDisplayed && $('.ui-autocomplete.dealerAutocomplete').is(":visible")) {
                    // track ga event
                    recordEvent('Global-Header', 'dealer-search-autocomplete_display', location.href, null, false);
                    acDisplayed = true;
                }
                // set acDisplayed to false if search box is empty
                if (elem.val().length == 0) {
                    acDisplayed = false;
                }
            }, 300);
        });
    </script>

<script type="text/javascript">
  $(document).ready(function () {
    $('.header-search-input').autocomplete({
      delay: "125",
      source: "/json/dealer/dealersearch?MaxItems=7",
      minLength: 2,
      position: {
        my: 'right+155 top',
        of: '.header-search-input',
      },
      create: function(){$(this).attr("autocomplete", "off");$(this).data("uiAutocomplete").menu.element.addClass("dealerAutocomplete");},
       renderItem: function (ul, item) {
         return $("<li><a><table cellspacing='0' cellpadding='0'><tr><td width='40' rowspan='2' align='bottom'><img src='" + (item.isCertified == 1 ? "/images/badge-certified-dealer.png" : "/images/spacer.gif") + "' width='35' height='45' /><td valign='bottom' class='bold notranslate'>" + item.dealerName + "</td></tr><tr><td valign='top' class='notranslate'>" + item.city + ", " + item.state + "</td></table></a></li>").appendTo(ul);
       },
       renderFooter: function (ul) {
         return $("<span class='display-none'></span>").appendTo(ul);
       },
       select: function (event, ui) { 
    if (ui.item == null) {
    location.href = '/search/?q=' + escape($('#' + $(this).context.id).val());
    } else {
    // track ga event
    recordEvent('Global-Header', 'dealer-search-autocomplete_click', location.href, null, false);

    // track optimizely event if in AB test
    // FIXME: A/B TEST FOR SEARCH BOX PLACEHOLDER 
    if($('#headerAutoComplete').hasClass("headerLinkAbTest")){
       window['optimizely'] = window['optimizely'] || [];
       window['optimizely'].push({
       type: "event",
       eventName: "HeaderLinkClick"
       });
    }

    // track adobe event
    window.digitalData = window.digitalData || [];
    window.digitalData.pageInfo = {
    suggestedClick: true,
    dealerShip: ui.item.dealerId
    };
    location.href = '/dealer/redirect.aspx?dealerId=' + ui.item.dealerId;
    } },
    });
  });
</script>
<script type="text/javascript">
  $(document).ready(function () {
    $('.header-mobile-search-input').autocomplete({
      delay: "125",
      source: "/json/dealer/dealersearch?MaxItems=7",
      minLength: 2,
      position: {
        my: 'left top+10',
        of: '.header-mobile-search-input',
      },
      create: function(){$(this).attr("autocomplete", "off");$(this).data("uiAutocomplete").menu.element.addClass("dealerAutocomplete");},
       renderItem: function (ul, item) {
         return $("<li><a><table cellspacing='0' cellpadding='0'><tr><td width='40' rowspan='2' align='bottom'><img src='" + (item.isCertified == 1 ? "/images/badge-certified-dealer.png" : "/images/spacer.gif") + "' width='35' height='45' /><td valign='bottom' class='bold notranslate'>" + item.dealerName + "</td></tr><tr><td valign='top' class='notranslate'>" + item.city + ", " + item.state + "</td></table></a></li>").appendTo(ul);
       },
       renderFooter: function (ul) {
         return $("<span class='display-none'></span>").appendTo(ul);
       },
       select: function (event, ui) { 
    if (ui.item == null) {
    location.href = '/search/?q=' + escape($('#' + $(this).context.id).val());
    } else {
    // track ga event
    recordEvent('Global-Header', 'dealer-search-autocomplete_click', location.href, null, false);

    // track optimizely event if in AB test
    // FIXME: A/B TEST FOR SEARCH BOX PLACEHOLDER 
    if($('#headerAutoComplete').hasClass("headerLinkAbTest")){
       window['optimizely'] = window['optimizely'] || [];
       window['optimizely'].push({
       type: "event",
       eventName: "HeaderLinkClick"
       });
    }

    // track adobe event
    window.digitalData = window.digitalData || [];
    window.digitalData.pageInfo = {
    suggestedClick: true,
    dealerShip: ui.item.dealerId
    };
    location.href = '/dealer/redirect.aspx?dealerId=' + ui.item.dealerId;
    } },
    });
  });
</script>


    
    <script type="text/javascript">
    (function (i, s, o, g, r, a, m) {
        i['RoxanneObject'] = r;
        i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date();
        a = s.createElement(o),
            m = s.getElementsByTagName(o)[0];
        a.async = 1;
        a.src = g;
        m.parentNode.insertBefore(a, m)
    })(window, document, 'script', 'https://ref.dealerinspire.com/site/98263/code', 'roxanne');
    </script>

    <!-- required per licensing with myfonts.net --><link rel="stylesheet" type="text/css" href="//hello.myfonts.net/count/2afa47" />

</body>
</html>
  recorded_at: Thu, 14 Jan 2021 00:25:51 GMT
recorded_with: VCR 6.0.0
